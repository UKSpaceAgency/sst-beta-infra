{
	"info": {
		"_postman_id": "0db77065-d78b-4a76-9425-fda81201243c",
		"name": "MyS API",
		"description": "REST API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22130995"
	},
	"item": [
		{
			"name": "v1",
			"item": [
				{
					"name": "users",
					"item": [
						{
							"name": "UNTESTED",
							"item": [
								{
									"name": "Post User",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"organization_id\": \"<uuid>\",\n  \"is_active\": true,\n  \"is_verified\": false,\n  \"role\": \"USER\",\n  \"notification_settings\": {},\n  \"notification_thresholds\": [\n    {\n      \"type\": \"PROBABILITY_OF_COLLISION\",\n      \"value\": \"<number>\"\n    },\n    {\n      \"type\": \"MEAN_RADIAL_MISS_DISTANCE\",\n      \"value\": \"<number>\"\n    }\n  ],\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"phone_number\": \"<string>\",\n  \"toc_accepted_at\": \"<dateTime>\",\n  \"account_details_confirmed_at\": \"<dateTime>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"users"
											]
										},
										"description": "## Description\nCreates user.\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can create users.                                                |\n|Organization admin |Can create non-analyst users for his/hers organization.          |\n|Everyone else      |Can't create users.                                              |"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<email>\",\n  \"organization_id\": \"<uuid>\",\n  \"is_active\": true,\n  \"is_verified\": false,\n  \"role\": \"USER\",\n  \"notification_settings\": {},\n  \"notification_thresholds\": [\n    {\n      \"type\": \"PROBABILITY_OF_COLLISION\",\n      \"value\": \"<number>\"\n    },\n    {\n      \"type\": \"MEAN_RADIAL_MISS_DISTANCE\",\n      \"value\": \"<number>\"\n    }\n  ],\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"phone_number\": \"<string>\",\n  \"toc_accepted_at\": \"<dateTime>\",\n  \"account_details_confirmed_at\": \"<dateTime>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v1/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"users"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<email>\",\n  \"organization_id\": \"<uuid>\",\n  \"is_active\": true,\n  \"is_verified\": false,\n  \"role\": \"USER\",\n  \"notification_settings\": {},\n  \"notification_thresholds\": [\n    {\n      \"type\": \"PROBABILITY_OF_COLLISION\",\n      \"value\": \"<number>\"\n    },\n    {\n      \"type\": \"MEAN_RADIAL_MISS_DISTANCE\",\n      \"value\": \"<number>\"\n    }\n  ],\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"phone_number\": \"<string>\",\n  \"toc_accepted_at\": \"<dateTime>\",\n  \"account_details_confirmed_at\": \"<dateTime>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v1/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"users"
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "Delete User",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/users/:user_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"users",
												":user_id"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "<uuid>"
												}
											]
										},
										"description": "## Description\nSoft-deletes user and deletes it permanently from Auth0.\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can delete all users.                                            |\n|Organization Admin |Can delete users from his/hers organization.                     |\n|Everyone else      |Can't delete users.                                              |"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/users/:user_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"users",
														":user_id"
													],
													"variable": [
														{
															"key": "user_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/users/:user_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"users",
														":user_id"
													],
													"variable": [
														{
															"key": "user_id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get Me",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resp = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct user retrieved\", function () {\r",
											"    pm.expect(resp.email).to.equal(pm.collectionVariables.get(\"testUserEmail\"));\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"testUserId\", resp.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/users/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"users",
										"me"
									]
								},
								"description": "## Description\nRetrieves information about yourself.\n\n## User Roles\n|User Role       |Permissions                                                      |\n|----------------|-----------------------------------------------------------------|\n|All             |Can retrieve information about themselves.                       |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/users/me",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"users",
												"me"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"email\": \"<email>\",\n  \"organization_id\": \"<uuid>\",\n  \"organization_name\": \"<string>\",\n  \"id\": \"<string>\",\n  \"is_active\": true,\n  \"is_verified\": false,\n  \"role\": \"USER\",\n  \"notification_settings\": {},\n  \"notification_thresholds\": [\n    {\n      \"type\": \"TIME_TO_EVENT\",\n      \"value\": \"<number>\"\n    },\n    {\n      \"type\": \"MEAN_RADIAL_MISS_DISTANCE\",\n      \"value\": \"<number>\"\n    }\n  ],\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"phone_number\": \"<string>\",\n  \"toc_accepted_at\": \"<dateTime>\",\n  \"account_details_confirmed_at\": \"<dateTime>\"\n}"
								}
							]
						},
						{
							"name": "Post Me Client Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resp = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/users/me/client-credentials",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"users",
										"me",
										"client-credentials"
									]
								},
								"description": "## Description\nGenerate client credentials.\n\n## User Roles\n|User Role       |Permissions                                                      |\n|----------------|-----------------------------------------------------------------|\n|All             |Can generate client credentials for themselves.                  |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/users/me/client-credentials",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"users",
												"me",
												"client-credentials"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"client_id\": \"<string>\",\n  \"client_secret\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Patch Me",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resp = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"New name set successfully\", function () {\r",
											"    pm.expect(resp.first_name).to.equal(\"TestFirstName\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"TestFirstName\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/users/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"users",
										"me"
									]
								},
								"description": "## Description\nUpdate information about yourself.\n\n## User Roles\n|User Role       |Permissions                                                      |\n|----------------|-----------------------------------------------------------------|\n|All             |Can update information about themselves.                         |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"is_active\": \"<boolean>\",\n  \"is_verified\": \"<boolean>\",\n  \"notification_settings\": {},\n  \"notification_thresholds\": [\n    {\n      \"type\": \"TOTAL_MISS_DISTANCE\",\n      \"value\": \"<number>\"\n    },\n    {\n      \"type\": \"TIME_TO_EVENT\",\n      \"value\": \"<number>\"\n    }\n  ],\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"phone_number\": \"<string>\",\n  \"toc_accepted_at\": \"<dateTime>\",\n  \"account_details_confirmed_at\": \"<dateTime>\",\n  \"role\": \"ANALYST\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/users/me",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"users",
												"me"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"email\": \"<email>\",\n  \"organization_id\": \"<uuid>\",\n  \"organization_name\": \"<string>\",\n  \"id\": \"<string>\",\n  \"is_active\": true,\n  \"is_verified\": false,\n  \"role\": \"USER\",\n  \"notification_settings\": {},\n  \"notification_thresholds\": [\n    {\n      \"type\": \"TIME_TO_EVENT\",\n      \"value\": \"<number>\"\n    },\n    {\n      \"type\": \"MEAN_RADIAL_MISS_DISTANCE\",\n      \"value\": \"<number>\"\n    }\n  ],\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"phone_number\": \"<string>\",\n  \"toc_accepted_at\": \"<dateTime>\",\n  \"account_details_confirmed_at\": \"<dateTime>\"\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"is_active\": \"<boolean>\",\n  \"is_verified\": \"<boolean>\",\n  \"notification_settings\": {},\n  \"notification_thresholds\": [\n    {\n      \"type\": \"TOTAL_MISS_DISTANCE\",\n      \"value\": \"<number>\"\n    },\n    {\n      \"type\": \"TIME_TO_EVENT\",\n      \"value\": \"<number>\"\n    }\n  ],\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"phone_number\": \"<string>\",\n  \"toc_accepted_at\": \"<dateTime>\",\n  \"account_details_confirmed_at\": \"<dateTime>\",\n  \"role\": \"ANALYST\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/users/me",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"users",
												"me"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get User (with ID)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resp = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct user retrieved\", function () {\r",
											"    pm.expect(resp.email).to.equal(pm.collectionVariables.get(\"testUserEmail\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Updated name stored\", function () {\r",
											"    pm.expect(resp.first_name).to.equal(\"TestFirstName\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{testUserId}}"
										}
									]
								},
								"description": "## Description\nRetrieves specific user.\n\n## User Roles\n|User Role            |Permissions                                                      |\n|---------------------|-----------------------------------------------------------------|\n|Superuser            |Can retrieve all users.                                          |\n|Organization admin   |Can retrieve users from his/hers organization.                   |\n|Everyone else        |Can't retrieve users.                                            |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/users/:user_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"users",
												":user_id"
											],
											"variable": [
												{
													"key": "user_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"email\": \"<email>\",\n  \"organization_id\": \"<uuid>\",\n  \"organization_name\": \"<string>\",\n  \"id\": \"<string>\",\n  \"is_active\": true,\n  \"is_verified\": false,\n  \"role\": \"USER\",\n  \"notification_settings\": {},\n  \"notification_thresholds\": [\n    {\n      \"type\": \"TIME_TO_EVENT\",\n      \"value\": \"<number>\"\n    },\n    {\n      \"type\": \"MEAN_RADIAL_MISS_DISTANCE\",\n      \"value\": \"<number>\"\n    }\n  ],\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"phone_number\": \"<string>\",\n  \"toc_accepted_at\": \"<dateTime>\",\n  \"account_details_confirmed_at\": \"<dateTime>\"\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/users/:user_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"users",
												":user_id"
											],
											"variable": [
												{
													"key": "user_id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Patch User (with ID)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resp = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Name set back successfully\", function () {\r",
											"    pm.expect(resp.first_name).to.equal(pm.collectionVariables.get(\"testUserFirstName\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"first_name\": \"{{testUserFirstName}}\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/users/:user_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{testUserId}}"
										}
									]
								},
								"description": "## Description\nUpdates information about specific user.\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can update all users.                                            |\n|Organization admin |Can update users from his/hers organization.                     |\n|Everyone else      |Can't update users.                                              |\n\nOrganization admins cannot update role to Analyst/Superuser."
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"is_active\": \"<boolean>\",\n  \"is_verified\": \"<boolean>\",\n  \"notification_settings\": {},\n  \"notification_thresholds\": [\n    {\n      \"type\": \"TOTAL_MISS_DISTANCE\",\n      \"value\": \"<number>\"\n    },\n    {\n      \"type\": \"TIME_TO_EVENT\",\n      \"value\": \"<number>\"\n    }\n  ],\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"phone_number\": \"<string>\",\n  \"toc_accepted_at\": \"<dateTime>\",\n  \"account_details_confirmed_at\": \"<dateTime>\",\n  \"role\": \"ANALYST\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/users/:user_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"users",
												":user_id"
											],
											"variable": [
												{
													"key": "user_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"email\": \"<email>\",\n  \"organization_id\": \"<uuid>\",\n  \"organization_name\": \"<string>\",\n  \"id\": \"<string>\",\n  \"is_active\": true,\n  \"is_verified\": false,\n  \"role\": \"USER\",\n  \"notification_settings\": {},\n  \"notification_thresholds\": [\n    {\n      \"type\": \"TIME_TO_EVENT\",\n      \"value\": \"<number>\"\n    },\n    {\n      \"type\": \"MEAN_RADIAL_MISS_DISTANCE\",\n      \"value\": \"<number>\"\n    }\n  ],\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"phone_number\": \"<string>\",\n  \"toc_accepted_at\": \"<dateTime>\",\n  \"account_details_confirmed_at\": \"<dateTime>\"\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"is_active\": \"<boolean>\",\n  \"is_verified\": \"<boolean>\",\n  \"notification_settings\": {},\n  \"notification_thresholds\": [\n    {\n      \"type\": \"TOTAL_MISS_DISTANCE\",\n      \"value\": \"<number>\"\n    },\n    {\n      \"type\": \"TIME_TO_EVENT\",\n      \"value\": \"<number>\"\n    }\n  ],\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"phone_number\": \"<string>\",\n  \"toc_accepted_at\": \"<dateTime>\",\n  \"account_details_confirmed_at\": \"<dateTime>\",\n  \"role\": \"ANALYST\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/users/:user_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"users",
												":user_id"
											],
											"variable": [
												{
													"key": "user_id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Gets list of users in their organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resp = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Test user in list\", () => {\r",
											"    pm.expect(utils.isKeyValuePairInObjectList(resp, \"id\", pm.collectionVariables.get(\"testUserId\"))).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"users"
									]
								},
								"description": "## Description\nGets list of users with metadata in their organization.\n\n## User Roles\n|User Role           |Permissions                                                      |\n|--------------------|-----------------------------------------------------------------|\n|Superuser           |Can list users in their organization.                            |\n|Organization admin  |Can list users in their organization.                            |\n|Everyone else       |Can't list users.                                                |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<uuid>\",\n    \"email\": \"<email>\",\n    \"isActive\": \"<boolean>\",\n    \"organizationId\": \"<uuid>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"role\": \"USER\",\n    \"accountDetailsConfirmedAt\": \"<dateTime>\"\n  },\n  {\n    \"id\": \"<uuid>\",\n    \"email\": \"<email>\",\n    \"isActive\": \"<boolean>\",\n    \"organizationId\": \"<uuid>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"role\": \"USER\",\n    \"accountDetailsConfirmedAt\": \"<dateTime>\"\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "stats",
					"item": [
						{
							"name": "objects-tracked",
							"item": [
								{
									"name": "Tracked Satellites",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resp = pm.response.json();\r",
													"\r",
													"const expected_keys = [\r",
													"    \"objectType\",\r",
													"    \"count\"\r",
													"];\r",
													"\r",
													"pm.test(\"Status code 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Objects tracked (stats) returned contain expected fields\", () => {\r",
													"    resp.forEach(function (stat) {\r",
													"        pm.expect(stat).to.have.all.keys(expected_keys)\r",
													"        });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/stats/objects-tracked",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"stats",
												"objects-tracked"
											]
										},
										"description": "## Description\nGets number of Satellites groupped by type (debris/payload/etc)\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Everyone           |Can see events across all organizations.                         |"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/stats/objects-tracked",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"stats",
														"objects-tracked"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"objectType\": \"<string>\",\n    \"count\": \"<integer>\"\n  },\n  {\n    \"objectType\": \"<string>\",\n    \"count\": \"<integer>\"\n  }\n]"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/stats/objects-tracked",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"stats",
														"objects-tracked"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "notifications-sent",
							"item": [
								{
									"name": "Notifications Sent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resp = pm.response.json();\r",
													"\r",
													"const expected_keys = [\r",
													"    \"month\",\r",
													"    \"type\",\r",
													"    \"count\"\r",
													"];\r",
													"\r",
													"pm.test(\"Status code 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Notifications sent (stats) returned contain expected fields\", () => {\r",
													"    resp.forEach(function (stat) {\r",
													"        pm.expect(stat).to.have.all.keys(expected_keys)\r",
													"        });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/stats/notifications-sent?group_by_month=true&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"stats",
												"notifications-sent"
											],
											"query": [
												{
													"key": "start_date",
													"value": "{{date5DaysAgo}}",
													"disabled": true
												},
												{
													"key": "end_date",
													"value": "{{dateToday}}",
													"disabled": true
												},
												{
													"key": "group_by_month",
													"value": "true"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										},
										"description": "## Description\nGets number of Notifications groupped by type (email/SMS) and date (days, months)\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Everyone           |Can see notification number across all organizations.            |"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/stats/notifications-sent?start_date=<dateTime>&end_date=<dateTime>&group_by_month=false&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"stats",
														"notifications-sent"
													],
													"query": [
														{
															"key": "start_date",
															"value": "<dateTime>"
														},
														{
															"key": "end_date",
															"value": "<dateTime>"
														},
														{
															"key": "group_by_month",
															"value": "false"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"type\": \"<string>\",\n    \"count\": \"<integer>\",\n    \"month\": \"<date>\",\n    \"day\": \"<date>\"\n  },\n  {\n    \"type\": \"<string>\",\n    \"count\": \"<integer>\",\n    \"month\": \"<date>\",\n    \"day\": \"<date>\"\n  }\n]"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/stats/notifications-sent?start_date=<dateTime>&end_date=<dateTime>&group_by_month=false&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"stats",
														"notifications-sent"
													],
													"query": [
														{
															"key": "start_date",
															"value": "<dateTime>"
														},
														{
															"key": "end_date",
															"value": "<dateTime>"
														},
														{
															"key": "group_by_month",
															"value": "false"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/stats/notifications-sent?start_date=<dateTime>&end_date=<dateTime>&group_by_month=false&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"stats",
														"notifications-sent"
													],
													"query": [
														{
															"key": "start_date",
															"value": "<dateTime>"
														},
														{
															"key": "end_date",
															"value": "<dateTime>"
														},
														{
															"key": "group_by_month",
															"value": "false"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "events-type",
							"item": [
								{
									"name": "Events Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resp = pm.response.json();\r",
													"\r",
													"const expected_keys = [\r",
													"    \"eventType\",\r",
													"    \"count\"\r",
													"];\r",
													"\r",
													"pm.test(\"Status code 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Event types (stats) returned contain expected fields\", () => {\r",
													"    resp.forEach(function (stat) {\r",
													"        pm.expect(stat).to.have.all.keys(expected_keys)\r",
													"        });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/stats/events-type?start_date={{date5DaysAgo}}&end_date={{dateToday}}&group_by_timestamp_column=created_at&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"stats",
												"events-type"
											],
											"query": [
												{
													"key": "start_date",
													"value": "{{date5DaysAgo}}"
												},
												{
													"key": "end_date",
													"value": "{{dateToday}}"
												},
												{
													"key": "group_by_timestamp_column",
													"value": "created_at"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										},
										"description": "## Description\nReturns number of Events between different types of objects, ie. between UK licensed satellites,\ndebris or non-UK licensed satellites.\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can see events across all organizations.                         |\n|Analyst            |Can see events across all organizations.                         |\n|Everyone           |Can only see events with satellites in their organizations.      |"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/stats/events-type?start_date=<dateTime>&end_date=<dateTime>&group_by_timestamp_column=created_at&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"stats",
														"events-type"
													],
													"query": [
														{
															"key": "start_date",
															"value": "<dateTime>"
														},
														{
															"key": "end_date",
															"value": "<dateTime>"
														},
														{
															"key": "group_by_timestamp_column",
															"value": "created_at"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"eventType\": \"<string>\",\n    \"count\": \"<integer>\"\n  },\n  {\n    \"eventType\": \"<string>\",\n    \"count\": \"<integer>\"\n  }\n]"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/stats/events-type?start_date=<dateTime>&end_date=<dateTime>&group_by_timestamp_column=created_at&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"stats",
														"events-type"
													],
													"query": [
														{
															"key": "start_date",
															"value": "<dateTime>"
														},
														{
															"key": "end_date",
															"value": "<dateTime>"
														},
														{
															"key": "group_by_timestamp_column",
															"value": "created_at"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/stats/events-type?start_date=<dateTime>&end_date=<dateTime>&group_by_timestamp_column=created_at&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"stats",
														"events-type"
													],
													"query": [
														{
															"key": "start_date",
															"value": "<dateTime>"
														},
														{
															"key": "end_date",
															"value": "<dateTime>"
														},
														{
															"key": "group_by_timestamp_column",
															"value": "created_at"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "events-by-satellite",
							"item": [
								{
									"name": "Events By Satellite",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resp = pm.response.json();\r",
													"\r",
													"const expected_keys = [\r",
													"    \"commonName\",\r",
													"    \"noradId\",\r",
													"    \"events\",\r",
													"    \"collisionProbabilityRange\",\r",
													"    \"organizationName\"\r",
													"];\r",
													"\r",
													"pm.test(\"Status code 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Events by satellite (stats) returned contain expected fields\", () => {\r",
													"    resp.forEach(function (stat) {\r",
													"        pm.expect(stat).to.have.all.keys(expected_keys)\r",
													"        });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/stats/events-by-satellite?timestamp_column=created_at&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"stats",
												"events-by-satellite"
											],
											"query": [
												{
													"key": "start_date",
													"value": "<dateTime>",
													"disabled": true
												},
												{
													"key": "end_date",
													"value": "<dateTime>",
													"disabled": true
												},
												{
													"key": "timestamp_column",
													"value": "created_at"
												},
												{
													"key": "organization_id",
													"value": "<uuid>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										},
										"description": "## Description\nGets number of Events groupped by satellites and probability of collision.\nSuperusers and Analysts can choose Organization satellites belong to.\nOther users can only see Events/Satellites from their organization.\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can see events across all organizations.                         |\n|Analyst            |Can see events across all organizations.                         |\n|Everyone           |Can see events in their own organization.                        |"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/stats/events-by-satellite?start_date=<dateTime>&end_date=<dateTime>&timestamp_column=created_at&organization_id=<uuid>&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"stats",
														"events-by-satellite"
													],
													"query": [
														{
															"key": "start_date",
															"value": "<dateTime>"
														},
														{
															"key": "end_date",
															"value": "<dateTime>"
														},
														{
															"key": "timestamp_column",
															"value": "created_at"
														},
														{
															"key": "organization_id",
															"value": "<uuid>"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"commonName\": \"<string>\",\n    \"noradId\": \"<string>\",\n    \"events\": \"<integer>\",\n    \"collisionProbabilityRange\": \"<string>\",\n    \"organizationName\": \"<string>\"\n  },\n  {\n    \"commonName\": \"<string>\",\n    \"noradId\": \"<string>\",\n    \"events\": \"<integer>\",\n    \"collisionProbabilityRange\": \"<string>\",\n    \"organizationName\": \"<string>\"\n  }\n]"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/stats/events-by-satellite?start_date=<dateTime>&end_date=<dateTime>&timestamp_column=created_at&organization_id=<uuid>&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"stats",
														"events-by-satellite"
													],
													"query": [
														{
															"key": "start_date",
															"value": "<dateTime>"
														},
														{
															"key": "end_date",
															"value": "<dateTime>"
														},
														{
															"key": "timestamp_column",
															"value": "created_at"
														},
														{
															"key": "organization_id",
															"value": "<uuid>"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/stats/events-by-satellite?start_date=<dateTime>&end_date=<dateTime>&timestamp_column=created_at&organization_id=<uuid>&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"stats",
														"events-by-satellite"
													],
													"query": [
														{
															"key": "start_date",
															"value": "<dateTime>"
														},
														{
															"key": "end_date",
															"value": "<dateTime>"
														},
														{
															"key": "timestamp_column",
															"value": "created_at"
														},
														{
															"key": "organization_id",
															"value": "<uuid>"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "events-by-organization",
							"item": [
								{
									"name": "Events By Organization (time)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resp = pm.response.json();\r",
													"\r",
													"const expected_keys = [\r",
													"    \"name\",\r",
													"    \"id\",\r",
													"    \"events\",\r",
													"    \"collisionProbabilityRange\"\r",
													"];\r",
													"\r",
													"pm.test(\"Status code 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Events by satellite (stats) returned contain expected fields\", () => {\r",
													"    resp.forEach(function (stat) {\r",
													"        pm.expect(stat).to.have.all.keys(expected_keys)\r",
													"        });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/stats/events-by-organization?start_date={{date5DaysAgo}}&end_date={{dateToday}}&timestamp_column=created_at&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"stats",
												"events-by-organization"
											],
											"query": [
												{
													"key": "start_date",
													"value": "{{date5DaysAgo}}"
												},
												{
													"key": "end_date",
													"value": "{{dateToday}}"
												},
												{
													"key": "timestamp_column",
													"value": "created_at"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										},
										"description": "## Description\nGets the number of Events per organization, groupped into probability of collision ranges: 0..10e-5..10e-3..1.\n\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can see events across all organizations.                         |\n|Analyst            |Can see events across all organizations.                         |\n|Everyone           |Can see events in their own organization.                        |"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/stats/events-by-organization?start_date=<dateTime>&end_date=<dateTime>&timestamp_column=created_at&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"stats",
														"events-by-organization"
													],
													"query": [
														{
															"key": "start_date",
															"value": "<dateTime>"
														},
														{
															"key": "end_date",
															"value": "<dateTime>"
														},
														{
															"key": "timestamp_column",
															"value": "created_at"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"name\": \"<string>\",\n    \"events\": \"<integer>\",\n    \"collisionProbabilityRange\": \"<string>\",\n    \"id\": \"<uuid>\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"events\": \"<integer>\",\n    \"collisionProbabilityRange\": \"<string>\",\n    \"id\": \"<uuid>\"\n  }\n]"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/stats/events-by-organization?start_date=<dateTime>&end_date=<dateTime>&timestamp_column=created_at&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"stats",
														"events-by-organization"
													],
													"query": [
														{
															"key": "start_date",
															"value": "<dateTime>"
														},
														{
															"key": "end_date",
															"value": "<dateTime>"
														},
														{
															"key": "timestamp_column",
															"value": "created_at"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/stats/events-by-organization?start_date=<dateTime>&end_date=<dateTime>&timestamp_column=created_at&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"stats",
														"events-by-organization"
													],
													"query": [
														{
															"key": "start_date",
															"value": "<dateTime>"
														},
														{
															"key": "end_date",
															"value": "<dateTime>"
														},
														{
															"key": "timestamp_column",
															"value": "created_at"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "Events By Organization (timezone)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resp = pm.response.json();\r",
													"\r",
													"const expected_keys = [\r",
													"    \"name\",\r",
													"    \"id\",\r",
													"    \"events\",\r",
													"    \"collisionProbabilityRange\"\r",
													"];\r",
													"\r",
													"pm.test(\"Status code 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Events by satellite (stats) returned contain expected fields\", () => {\r",
													"    resp.forEach(function (stat) {\r",
													"        pm.expect(stat).to.have.all.keys(expected_keys)\r",
													"        });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const dateToday = pm.collectionVariables.get(\"dateToday\");\r",
													"const date5DaysAgo = pm.collectionVariables.get(\"date5DaysAgo\");\r",
													"\r",
													"const tzDateToday = dateToday.replace(\"Z\", encodeURIComponent(\"+01:00\"));\r",
													"const tzDate5DaysAgo = date5DaysAgo.replace(\"Z\", encodeURIComponent(\"+01:00\"));\r",
													"\r",
													"pm.variables.set(\"dateToday\", tzDateToday);\r",
													"pm.variables.set(\"date5DaysAgo\", tzDate5DaysAgo);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/stats/events-by-organization?start_date={{date5DaysAgo}}&end_date={{dateToday}}&timestamp_column=created_at&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"stats",
												"events-by-organization"
											],
											"query": [
												{
													"key": "start_date",
													"value": "{{date5DaysAgo}}"
												},
												{
													"key": "end_date",
													"value": "{{dateToday}}"
												},
												{
													"key": "timestamp_column",
													"value": "created_at"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										},
										"description": "## Description\nGets the number of Events per organization, groupped into probability of collision ranges: 0..10e-5..10e-3..1.\n\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can see events across all organizations.                         |\n|Analyst            |Can see events across all organizations.                         |\n|Everyone           |Can see events in their own organization.                        |"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/stats/events-by-organization?start_date=<dateTime>&end_date=<dateTime>&timestamp_column=created_at&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"stats",
														"events-by-organization"
													],
													"query": [
														{
															"key": "start_date",
															"value": "<dateTime>"
														},
														{
															"key": "end_date",
															"value": "<dateTime>"
														},
														{
															"key": "timestamp_column",
															"value": "created_at"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"name\": \"<string>\",\n    \"events\": \"<integer>\",\n    \"collisionProbabilityRange\": \"<string>\",\n    \"id\": \"<uuid>\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"events\": \"<integer>\",\n    \"collisionProbabilityRange\": \"<string>\",\n    \"id\": \"<uuid>\"\n  }\n]"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/stats/events-by-organization?start_date=<dateTime>&end_date=<dateTime>&timestamp_column=created_at&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"stats",
														"events-by-organization"
													],
													"query": [
														{
															"key": "start_date",
															"value": "<dateTime>"
														},
														{
															"key": "end_date",
															"value": "<dateTime>"
														},
														{
															"key": "timestamp_column",
															"value": "created_at"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/stats/events-by-organization?start_date=<dateTime>&end_date=<dateTime>&timestamp_column=created_at&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"stats",
														"events-by-organization"
													],
													"query": [
														{
															"key": "start_date",
															"value": "<dateTime>"
														},
														{
															"key": "end_date",
															"value": "<dateTime>"
														},
														{
															"key": "timestamp_column",
															"value": "created_at"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get Statistics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resp = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Satellites count over expected range (> 50000)\", function() {\r",
											"    pm.expect(resp.satellites_count).to.be.above(50000);\r",
											"});\r",
											"\r",
											"pm.test(\"Ephemeris count over expected range (> 30)\", function() {\r",
											"    pm.expect(resp.ephemeris_count).to.be.above(30);\r",
											"});\r",
											"\r",
											"pm.test(\"Events count over expected range (> 900000)\", function() {\r",
											"    pm.expect(resp.events_count).to.be.above(900000);\r",
											"});\r",
											"\r",
											"pm.test(\"CDMs count bigger than event count\", function() {\r",
											"    pm.expect(resp.cdms_count).to.be.above(resp.events_count);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/stats",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"stats"
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stats"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						}
					]
				},
				{
					"name": "satellites",
					"item": [
						{
							"name": "{satellite_id}",
							"item": [
								{
									"name": "Modify Satellite data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code 403 with misconfigured OAuth\", function() {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth1",
											"oauth1": [
												{
													"key": "signatureMethod",
													"value": "HMAC-SHA1",
													"type": "string"
												},
												{
													"key": "version",
													"value": "1.0",
													"type": "string"
												},
												{
													"key": "addParamsToHeader",
													"value": false,
													"type": "boolean"
												},
												{
													"key": "addEmptyParamsToSign",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"common_name\": \"<string>\",\n  \"norad_id\": \"<string>\",\n  \"international_designator\": \"<string>\",\n  \"object_type\": \"<string>\",\n  \"license_country\": \"<string>\",\n  \"launch_date\": \"<string>\",\n  \"apogee\": \"<string>\",\n  \"perigee\": \"<string>\",\n  \"inclination\": \"<number>\",\n  \"period\": \"<number>\",\n  \"organization_id\": \"<uuid>\",\n  \"esa_discos_id\": \"<string>\",\n  \"mass\": \"<number>\",\n  \"height\": \"<number>\",\n  \"depth\": \"<number>\",\n  \"width\": \"<number>\",\n  \"diameter\": \"<number>\",\n  \"span\": \"<number>\",\n  \"cross_section_min\": \"<number>\",\n  \"cross_section_avg\": \"<number>\",\n  \"cross_section_max\": \"<number>\",\n  \"shape\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/satellites/:satellite_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"satellites",
												":satellite_id"
											],
											"variable": [
												{
													"key": "satellite_id",
													"value": "<uuid>"
												}
											]
										},
										"description": "## Description\nUpdate Satellite data based on SpaceTrack.\n\n## User Roles\n|User Role       |Permissions                                                      |\n|----------------|-----------------------------------------------------------------|\n|Superuser       |Can update all satellites.                                       |\n|Everyone else   |Can't update satellites.                                         |"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"common_name\": \"<string>\",\n  \"norad_id\": \"<string>\",\n  \"international_designator\": \"<string>\",\n  \"object_type\": \"<string>\",\n  \"license_country\": \"<string>\",\n  \"launch_date\": \"<string>\",\n  \"apogee\": \"<string>\",\n  \"perigee\": \"<string>\",\n  \"inclination\": \"<number>\",\n  \"period\": \"<number>\",\n  \"organization_id\": \"<uuid>\",\n  \"esa_discos_id\": \"<string>\",\n  \"mass\": \"<number>\",\n  \"height\": \"<number>\",\n  \"depth\": \"<number>\",\n  \"width\": \"<number>\",\n  \"diameter\": \"<number>\",\n  \"span\": \"<number>\",\n  \"cross_section_min\": \"<number>\",\n  \"cross_section_avg\": \"<number>\",\n  \"cross_section_max\": \"<number>\",\n  \"shape\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v1/satellites/:satellite_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"satellites",
														":satellite_id"
													],
													"variable": [
														{
															"key": "satellite_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"common_name\": \"<string>\",\n  \"norad_id\": \"<string>\",\n  \"international_designator\": \"<string>\",\n  \"object_type\": \"<string>\",\n  \"license_country\": \"<string>\",\n  \"launch_date\": \"<string>\",\n  \"apogee\": \"<string>\",\n  \"perigee\": \"<string>\",\n  \"inclination\": \"<number>\",\n  \"period\": \"<number>\",\n  \"organization_id\": \"<uuid>\",\n  \"esa_discos_id\": \"<string>\",\n  \"mass\": \"<number>\",\n  \"height\": \"<number>\",\n  \"depth\": \"<number>\",\n  \"width\": \"<number>\",\n  \"diameter\": \"<number>\",\n  \"span\": \"<number>\",\n  \"cross_section_min\": \"<number>\",\n  \"cross_section_avg\": \"<number>\",\n  \"cross_section_max\": \"<number>\",\n  \"shape\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v1/satellites/:satellite_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"satellites",
														":satellite_id"
													],
													"variable": [
														{
															"key": "satellite_id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"common_name\": \"<string>\",\n  \"norad_id\": \"<string>\",\n  \"international_designator\": \"<string>\",\n  \"object_type\": \"<string>\",\n  \"license_country\": \"<string>\",\n  \"launch_date\": \"<string>\",\n  \"apogee\": \"<string>\",\n  \"perigee\": \"<string>\",\n  \"inclination\": \"<number>\",\n  \"period\": \"<number>\",\n  \"organization_id\": \"<uuid>\",\n  \"esa_discos_id\": \"<string>\",\n  \"mass\": \"<number>\",\n  \"height\": \"<number>\",\n  \"depth\": \"<number>\",\n  \"width\": \"<number>\",\n  \"diameter\": \"<number>\",\n  \"span\": \"<number>\",\n  \"cross_section_min\": \"<number>\",\n  \"cross_section_avg\": \"<number>\",\n  \"cross_section_max\": \"<number>\",\n  \"shape\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v1/satellites/:satellite_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"satellites",
														":satellite_id"
													],
													"variable": [
														{
															"key": "satellite_id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "{norad_id}",
							"item": [
								{
									"name": "Get Satellite by NORAD ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resp = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct satellite retrieved\", function () {\r",
													"    pm.expect(resp.commonName).to.equal(pm.environment.get(\"testSatellitePrimaryName\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/satellites/:norad_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"satellites",
												":norad_id"
											],
											"variable": [
												{
													"key": "norad_id",
													"value": "{{testSatellitePrimaryNorad}}"
												}
											]
										},
										"description": "## Description\nRetrieves basic information of a Satellite.\n\n## User Roles\n|User Role       |Permissions                                                      |\n|----------------|-----------------------------------------------------------------|\n|All             |Can retrieve all satellites.                                     |"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/satellites/:norad_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"satellites",
														":norad_id"
													],
													"variable": [
														{
															"key": "norad_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<uuid>\",\n  \"isMonitored\": \"<boolean>\",\n  \"commonName\": \"<string>\",\n  \"internationalDesignator\": \"<string>\",\n  \"noradId\": \"<string>\",\n  \"esaUpdateTime\": \"<dateTime>\",\n  \"esaDiscosId\": \"<string>\",\n  \"objectType\": \"<string>\",\n  \"licenseCountry\": \"<string>\",\n  \"launchDate\": \"<string>\",\n  \"launchSite\": \"<string>\",\n  \"apogee\": \"<string>\",\n  \"perigee\": \"<string>\",\n  \"inclination\": \"<number>\",\n  \"period\": \"<number>\",\n  \"organizationId\": \"<uuid>\",\n  \"mass\": \"<number>\",\n  \"height\": \"<number>\",\n  \"depth\": \"<number>\",\n  \"width\": \"<number>\",\n  \"diameter\": \"<number>\",\n  \"span\": \"<number>\",\n  \"crossSectionMin\": \"<number>\",\n  \"crossSectionAvg\": \"<number>\",\n  \"crossSectionMax\": \"<number>\",\n  \"shape\": \"<string>\",\n  \"objectClass\": \"<string>\"\n}"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/satellites/:norad_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"satellites",
														":norad_id"
													],
													"variable": [
														{
															"key": "norad_id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/satellites/:norad_id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"satellites",
														":norad_id"
													],
													"variable": [
														{
															"key": "norad_id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "with-metadata",
							"item": [
								{
									"name": "Gets list of Satellites with metadata",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resp = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Primary satellite in list\", () => {\r",
													"    pm.expect(utils.isKeyValuePairInObjectList(resp, \"commonName\", pm.environment.get(\"testSatellitePrimaryName\"))).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/satellites/with-metadata?sort_by=norad_id&search_like={{testSatellitePrimaryNorad}}&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"satellites",
												"with-metadata"
											],
											"query": [
												{
													"key": "sort_by",
													"value": "norad_id"
												},
												{
													"key": "search_like",
													"value": "{{testSatellitePrimaryNorad}}"
												},
												{
													"key": "organization_id",
													"value": "<uuid>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										},
										"description": "## Description\nLists Satellites with metadata. Available satellites are filtered for different users.\n\n## User Roles\n|User Role       |Permissions                                                      |\n|----------------|-----------------------------------------------------------------|\n|Superuser       |Can list all satellites.                                         |\n|Analyst         |Can list all satellites.                                         |\n|Everyone else   |Can list satellites concerning user's organization.              |"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/satellites/with-metadata?sort_by=international_designator&search_like=<string>&organization_id=<uuid>&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"satellites",
														"with-metadata"
													],
													"query": [
														{
															"key": "sort_by",
															"value": "international_designator"
														},
														{
															"key": "search_like",
															"value": "<string>"
														},
														{
															"key": "organization_id",
															"value": "<uuid>"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"<uuid>\",\n    \"isMonitored\": \"<boolean>\",\n    \"commonName\": \"<string>\",\n    \"internationalDesignator\": \"<string>\",\n    \"metadata\": {},\n    \"noradId\": \"<string>\",\n    \"esaUpdateTime\": \"<dateTime>\",\n    \"esaDiscosId\": \"<string>\",\n    \"objectType\": \"<string>\",\n    \"licenseCountry\": \"<string>\",\n    \"launchDate\": \"<string>\",\n    \"launchSite\": \"<string>\",\n    \"apogee\": \"<string>\",\n    \"perigee\": \"<string>\",\n    \"inclination\": \"<number>\",\n    \"period\": \"<number>\",\n    \"organizationId\": \"<uuid>\",\n    \"mass\": \"<number>\",\n    \"height\": \"<number>\",\n    \"depth\": \"<number>\",\n    \"width\": \"<number>\",\n    \"diameter\": \"<number>\",\n    \"span\": \"<number>\",\n    \"crossSectionMin\": \"<number>\",\n    \"crossSectionAvg\": \"<number>\",\n    \"crossSectionMax\": \"<number>\",\n    \"shape\": \"<string>\",\n    \"objectClass\": \"<string>\"\n  },\n  {\n    \"id\": \"<uuid>\",\n    \"isMonitored\": \"<boolean>\",\n    \"commonName\": \"<string>\",\n    \"internationalDesignator\": \"<string>\",\n    \"metadata\": {},\n    \"noradId\": \"<string>\",\n    \"esaUpdateTime\": \"<dateTime>\",\n    \"esaDiscosId\": \"<string>\",\n    \"objectType\": \"<string>\",\n    \"licenseCountry\": \"<string>\",\n    \"launchDate\": \"<string>\",\n    \"launchSite\": \"<string>\",\n    \"apogee\": \"<string>\",\n    \"perigee\": \"<string>\",\n    \"inclination\": \"<number>\",\n    \"period\": \"<number>\",\n    \"organizationId\": \"<uuid>\",\n    \"mass\": \"<number>\",\n    \"height\": \"<number>\",\n    \"depth\": \"<number>\",\n    \"width\": \"<number>\",\n    \"diameter\": \"<number>\",\n    \"span\": \"<number>\",\n    \"crossSectionMin\": \"<number>\",\n    \"crossSectionAvg\": \"<number>\",\n    \"crossSectionMax\": \"<number>\",\n    \"shape\": \"<string>\",\n    \"objectClass\": \"<string>\"\n  }\n]"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/satellites/with-metadata?sort_by=international_designator&search_like=<string>&organization_id=<uuid>&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"satellites",
														"with-metadata"
													],
													"query": [
														{
															"key": "sort_by",
															"value": "international_designator"
														},
														{
															"key": "search_like",
															"value": "<string>"
														},
														{
															"key": "organization_id",
															"value": "<uuid>"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/satellites/with-metadata?sort_by=international_designator&search_like=<string>&organization_id=<uuid>&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"satellites",
														"with-metadata"
													],
													"query": [
														{
															"key": "sort_by",
															"value": "international_designator"
														},
														{
															"key": "search_like",
															"value": "<string>"
														},
														{
															"key": "organization_id",
															"value": "<uuid>"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "monitored",
							"item": [
								{
									"name": "Gets list of monitored Satellites within their organizations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resp = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Primary satellite in list\", () => {\r",
													"    pm.expect(utils.isKeyValuePairInObjectList(resp, \"noradId\", pm.collectionVariables.get(\"testSatellitePrimaryNorad\"))).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/satellites/monitored?sort_by=norad_id&limit=1000&offset=0&sort_order=desc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"satellites",
												"monitored"
											],
											"query": [
												{
													"key": "sort_by",
													"value": "norad_id"
												},
												{
													"key": "limit",
													"value": "1000"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "desc"
												}
											]
										},
										"description": "## Description\nLists Satellites with organization data.\n\n## User Roles\n|User Role       |Permissions                                                      |\n|----------------|-----------------------------------------------------------------|\n|Superuser       |Can list all satellites.                                         |\n|Analyst         |Can list all satellites.                                         |\n|Everyone else   |Can list satellites in their organization.                       |"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/satellites/monitored?sort_by=international_designator&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"satellites",
														"monitored"
													],
													"query": [
														{
															"key": "sort_by",
															"value": "international_designator"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"noradId\": \"<string>\",\n    \"commonName\": \"<string>\",\n    \"organizationId\": \"<uuid>\",\n    \"internationalDesignator\": \"<string>\",\n    \"organizationName\": \"<string>\",\n    \"esaDiscosId\": \"<string>\"\n  },\n  {\n    \"noradId\": \"<string>\",\n    \"commonName\": \"<string>\",\n    \"organizationId\": \"<uuid>\",\n    \"internationalDesignator\": \"<string>\",\n    \"organizationName\": \"<string>\",\n    \"esaDiscosId\": \"<string>\"\n  }\n]"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/satellites/monitored?sort_by=international_designator&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"satellites",
														"monitored"
													],
													"query": [
														{
															"key": "sort_by",
															"value": "international_designator"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/satellites/monitored?sort_by=international_designator&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"satellites",
														"monitored"
													],
													"query": [
														{
															"key": "sort_by",
															"value": "international_designator"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "esa-integration",
							"item": [
								{
									"name": "Trigger Satellite dimensions/mass import from ESA Discos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Also not triggering this ingest - instead check partial auth broken\r",
													"pm.test(\"Status code 401 (with wrong/partial auth)\", function() {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "asdasd",
													"type": "string"
												},
												{
													"key": "key",
													"value": "Authorization",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/satellites/esa-integration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"satellites",
												"esa-integration"
											]
										},
										"description": "## Description\nStarts Satellite data ingestion process by querying ESA Discos API.\n\n## User Roles\n|User Role       |Permissions                                                      |\n|----------------|-----------------------------------------------------------------|\n|Superuser       |Can trigger integration.                                         |\n|Everyone else   |Can't trigger integration.                                       |"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/satellites/esa-integration",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"satellites",
														"esa-integration"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/satellites/esa-integration",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"satellites",
														"esa-integration"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "by-organizations",
							"item": [
								{
									"name": "Gets count of monitored Satellites within their organizations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resp = pm.response.json();\r",
													"\r",
													"const expected_keys = [\r",
													"    \"organizationName\",\r",
													"    \"satellitesCount\"\r",
													"];\r",
													"\r",
													"pm.test(\"Status code 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Satellite counts returned contain expected fields\", () => {\r",
													"    resp.forEach(function (organisation) {\r",
													"        pm.expect(organisation).to.have.all.keys(expected_keys)\r",
													"        });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/satellites/by-organizations?sort_by=satellites_count&limit=100&offset=0&sort_order=desc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"satellites",
												"by-organizations"
											],
											"query": [
												{
													"key": "sort_by",
													"value": "satellites_count"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "desc"
												}
											]
										},
										"description": "## Description\nGets Satellite count within organizations and total count.\n\n## User Roles\n|User Role       |Permissions                                                      |\n|----------------|-----------------------------------------------------------------|\n|Superuser       |Can list all satellites.                                         |\n|Analyst         |Can list all satellites.                                         |\n|Everyone else   |Can list satellites in their organization.                       |"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/satellites/by-organizations?sort_by=international_designator&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"satellites",
														"by-organizations"
													],
													"query": [
														{
															"key": "sort_by",
															"value": "international_designator"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"organizationName\": \"<string>\",\n    \"satellitesCount\": \"<integer>\"\n  },\n  {\n    \"organizationName\": \"<string>\",\n    \"satellitesCount\": \"<integer>\"\n  }\n]"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/satellites/by-organizations?sort_by=international_designator&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"satellites",
														"by-organizations"
													],
													"query": [
														{
															"key": "sort_by",
															"value": "international_designator"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/satellites/by-organizations?sort_by=international_designator&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"satellites",
														"by-organizations"
													],
													"query": [
														{
															"key": "sort_by",
															"value": "international_designator"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "organizations",
					"item": [
						{
							"name": "Gets full list of Organizations.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resp = pm.response.json();\r",
											"\r",
											"const expected_keys = [\r",
											"    \"id\",\r",
											"    \"createdAt\",\r",
											"    \"updatedAt\",\r",
											"    \"name\",\r",
											"    \"emailDomain\",\r",
											"    \"accountsCount\",\r",
											"    \"adminAccountsCount\",\r",
											"    \"satellitesCount\"\r",
											"];\r",
											"\r",
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Organisations returned contain expected fields\", () => {\r",
											"    resp.forEach(function (organisation) {\r",
											"        pm.expect(organisation).to.have.all.keys(expected_keys)\r",
											"        });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/organizations/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"organizations",
										""
									]
								},
								"description": "## Description\nGets list of all organizations with the number of user and admin accounts.\n## User Roles\n|User Role              |Permissions                                            |\n|-----------------------|-------------------------------------------------------|\n|Superuser              |Can list all organizations.                            |\n|Analyst                |Can list all organizations.                            |\n|Org Admin, Operator    |Can list his organizations.                            |\n|Everyone else          |Can't list organizations.                              |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/organizations/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"organizations",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"name\": \"<string>\",\n    \"emailDomain\": \"<string>\",\n    \"accountsCount\": \"<integer>\",\n    \"adminAccountsCount\": \"<integer>\",\n    \"satellitesCount\": \"<integer>\",\n    \"id\": \"<uuid>\",\n    \"createdAt\": \"<dateTime>\",\n    \"updatedAt\": \"<dateTime>\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"emailDomain\": \"<string>\",\n    \"accountsCount\": \"<integer>\",\n    \"adminAccountsCount\": \"<integer>\",\n    \"satellitesCount\": \"<integer>\",\n    \"id\": \"<uuid>\",\n    \"createdAt\": \"<dateTime>\",\n    \"updatedAt\": \"<dateTime>\"\n  }\n]"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/organizations/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"organizations",
												""
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "messages",
					"item": [
						{
							"name": "contact-analyst",
							"item": [
								{
									"name": "Contact Analyst",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// We do not test this endpoint to avoid spamming analysts\r",
													"//  instead it is used to check auth is working\r",
													"\r",
													"pm.test(\"Status code 403 with no auth in header\", function() {\r",
													"    pm.response.to.have.status(403);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"eventId\": \"<string>\",\n  \"messageContent\": \"<string>\",\n  \"ccEmail\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/messages/contact-analyst",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"messages",
												"contact-analyst"
											]
										},
										"description": "## Description\nSends a message to pre-defined analyst email address\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Everyone           |Can send messages.                                               |"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"eventId\": \"<string>\",\n  \"messageContent\": \"<string>\",\n  \"ccEmail\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v1/messages/contact-analyst",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"messages",
														"contact-analyst"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"eventId\": \"<string>\",\n  \"messageContent\": \"<string>\",\n  \"ccEmail\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v1/messages/contact-analyst",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"messages",
														"contact-analyst"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"eventId\": \"<string>\",\n  \"messageContent\": \"<string>\",\n  \"ccEmail\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/v1/messages/contact-analyst",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"messages",
														"contact-analyst"
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "external-data-performance",
					"item": [
						{
							"name": "aggregated",
							"item": [
								{
									"name": "Gets data aggregated by day of external datasources performance data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resp = pm.response.json();\r",
													"\r",
													"const expected_keys = [\r",
													"    \"sourceType\",\r",
													"    \"sourceProvider\",\r",
													"    \"ingestionSum\",\r",
													"    \"ingestionDate\"\r",
													"];\r",
													"\r",
													"pm.test(\"Status code 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Aggregated performances returned contain expected fields\", () => {\r",
													"    resp.forEach(function (analysis) {\r",
													"        pm.expect(analysis).to.have.all.keys(expected_keys)\r",
													"        });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/external-data-performance/aggregated?max_age_days=1&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"external-data-performance",
												"aggregated"
											],
											"query": [
												{
													"key": "max_age_days",
													"value": "1",
													"description": "Maximum age of entries, in days"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/external-data-performance/aggregated?max_age_days=<integer>&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"external-data-performance",
														"aggregated"
													],
													"query": [
														{
															"key": "max_age_days",
															"value": "<integer>",
															"description": "Maximum age of entries, in days"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"sourceType\": \"<string>\",\n    \"sourceProvider\": \"<string>\",\n    \"ingestionDate\": \"<dateTime>\",\n    \"ingestionSum\": \"<integer>\"\n  },\n  {\n    \"sourceType\": \"<string>\",\n    \"sourceProvider\": \"<string>\",\n    \"ingestionDate\": \"<dateTime>\",\n    \"ingestionSum\": \"<integer>\"\n  }\n]"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/external-data-performance/aggregated?max_age_days=<integer>&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"external-data-performance",
														"aggregated"
													],
													"query": [
														{
															"key": "max_age_days",
															"value": "<integer>",
															"description": "Maximum age of entries, in days"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/external-data-performance/aggregated?max_age_days=<integer>&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"external-data-performance",
														"aggregated"
													],
													"query": [
														{
															"key": "max_age_days",
															"value": "<integer>",
															"description": "Maximum age of entries, in days"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "Gets list of external datasources performance data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resp = pm.response.json();\r",
											"\r",
											"const expected_keys = [\r",
											"    \"id\",\r",
											"    \"createdAt\",\r",
											"    \"updatedAt\",\r",
											"    \"sourceProvider\",\r",
											"    \"sourceType\",\r",
											"    \"ingestionStart\",\r",
											"    \"ingestionEnd\",\r",
											"    \"itemsFetched\"\r",
											"];\r",
											"\r",
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Performances returned contain expected fields\", () => {\r",
											"    resp.forEach(function (analysis) {\r",
											"        pm.expect(analysis).to.have.all.keys(expected_keys)\r",
											"        });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/external-data-performance/?max_age_days=1&limit=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"external-data-performance",
										""
									],
									"query": [
										{
											"key": "sort_by",
											"value": "created_at",
											"disabled": true
										},
										{
											"key": "source_provider",
											"value": "UKSA",
											"description": "Source provider name",
											"disabled": true
										},
										{
											"key": "source_type",
											"value": "Ephemeris",
											"description": "Type of source",
											"disabled": true
										},
										{
											"key": "max_age_days",
											"value": "1",
											"description": "Maximum age of entries, in days"
										},
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "offset",
											"value": "0",
											"disabled": true
										},
										{
											"key": "sort_order",
											"value": "asc",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/external-data-performance/?sort_by=created_at&source_provider=UKSA&source_type=Ephemeris&max_age_days=<integer>&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"external-data-performance",
												""
											],
											"query": [
												{
													"key": "sort_by",
													"value": "created_at"
												},
												{
													"key": "source_provider",
													"value": "UKSA",
													"description": "Source provider name"
												},
												{
													"key": "source_type",
													"value": "Ephemeris",
													"description": "Type of source"
												},
												{
													"key": "max_age_days",
													"value": "<integer>",
													"description": "Maximum age of entries, in days"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"sourceProvider\": \"ESADiscos\",\n    \"sourceType\": \"CDM\",\n    \"ingestionStart\": \"<dateTime>\",\n    \"id\": \"<uuid>\",\n    \"createdAt\": \"<dateTime>\",\n    \"updatedAt\": \"<dateTime>\",\n    \"ingestionEnd\": \"<dateTime>\",\n    \"itemsFetched\": \"<integer>\"\n  },\n  {\n    \"sourceProvider\": \"SpaceTrack\",\n    \"sourceType\": \"CDM\",\n    \"ingestionStart\": \"<dateTime>\",\n    \"id\": \"<uuid>\",\n    \"createdAt\": \"<dateTime>\",\n    \"updatedAt\": \"<dateTime>\",\n    \"ingestionEnd\": \"<dateTime>\",\n    \"itemsFetched\": \"<integer>\"\n  }\n]"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/external-data-performance/?sort_by=created_at&source_provider=UKSA&source_type=Ephemeris&max_age_days=<integer>&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"external-data-performance",
												""
											],
											"query": [
												{
													"key": "sort_by",
													"value": "created_at"
												},
												{
													"key": "source_provider",
													"value": "UKSA",
													"description": "Source provider name"
												},
												{
													"key": "source_type",
													"value": "Ephemeris",
													"description": "Type of source"
												},
												{
													"key": "max_age_days",
													"value": "<integer>",
													"description": "Maximum age of entries, in days"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/external-data-performance/?sort_by=created_at&source_provider=UKSA&source_type=Ephemeris&max_age_days=<integer>&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"external-data-performance",
												""
											],
											"query": [
												{
													"key": "sort_by",
													"value": "created_at"
												},
												{
													"key": "source_provider",
													"value": "UKSA",
													"description": "Source provider name"
												},
												{
													"key": "source_type",
													"value": "Ephemeris",
													"description": "Type of source"
												},
												{
													"key": "max_age_days",
													"value": "<integer>",
													"description": "Maximum age of entries, in days"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "events",
					"item": [
						{
							"name": "{event_id}",
							"item": [
								{
									"name": "summary",
									"item": [
										{
											"name": "Get single Event summary data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const resp = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code 200\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Filter by Event Short ID returns only events with that ID\", function () {\r",
															"    resp.forEach((event) => {\r",
															"        pm.expect(event.shortId).to.be.eql(pm.variables.get(\"testEventShortId\"))\r",
															"    })\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/events/:event_id/summary?limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"events",
														":event_id",
														"summary"
													],
													"query": [
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													],
													"variable": [
														{
															"key": "event_id",
															"value": "{{testEventShortId}}"
														}
													]
												},
												"description": "## Description\nReturns summary data for an Event. Data can be taken from Analysis or from CDMs\n(the most recent type is returned).\n\n## User Roles\n|User Role       |Permissions                                                         |\n|----------------|--------------------------------------------------------------------|\n|Superuser       |Can retrieve summaries for all events.                              |\n|Analyst         |Can retrieve summaries for all events.                              |\n|Everyone else   |Can retrieve summaries for events concerning user's organization.   |"
											},
											"response": [
												{
													"name": "Successful Response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/v1/events/:event_id/summary?limit=100&offset=0&sort_order=asc",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"events",
																":event_id",
																"summary"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "100"
																},
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "sort_order",
																	"value": "asc"
																}
															],
															"variable": [
																{
																	"key": "event_id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"id\": \"<uuid>\",\n    \"shortId\": \"<string>\",\n    \"updateTime\": \"<dateTime>\",\n    \"cdmExternalId\": \"<string>\",\n    \"primaryObjectNoradId\": \"<string>\",\n    \"secondaryObjectNoradId\": \"<string>\",\n    \"tcaTime\": \"<dateTime>\",\n    \"dataSource\": \"UKSA Analysis\",\n    \"missDistance\": \"<number>\",\n    \"cdmId\": \"<uuid>\",\n    \"collisionProbability\": \"<number>\",\n    \"collisionProbabilityMethod\": \"<string>\",\n    \"radialMissDistance\": \"<number>\",\n    \"intrackMissDistance\": \"<number>\",\n    \"crosstrackMissDistance\": \"<number>\",\n    \"primaryObjectUncertainties\": {\n      \"radialMissDistanceUncertainty\": \"<number>\",\n      \"intrackMissDistanceUncertainty\": \"<number>\",\n      \"crosstrackMissDistanceUncertainty\": \"<number>\"\n    },\n    \"secondaryObjectUncertainties\": {\n      \"radialMissDistanceUncertainty\": \"<number>\",\n      \"intrackMissDistanceUncertainty\": \"<number>\",\n      \"crosstrackMissDistanceUncertainty\": \"<number>\"\n    },\n    \"primaryObjectCdmType\": \"Owner/operator ephemeris\",\n    \"secondaryObjectCdmType\": \"Owner/operator ephemeris\",\n    \"altitude\": \"<number>\",\n    \"latitude\": \"<number>\",\n    \"longitude\": \"<number>\",\n    \"relativeVelocity\": \"<number>\",\n    \"combinedMass\": \"<number>\",\n    \"possibleFragments\": \"<number>\",\n    \"primaryObjectSize\": \"<number>\",\n    \"secondaryObjectSize\": \"<number>\"\n  },\n  {\n    \"id\": \"<uuid>\",\n    \"shortId\": \"<string>\",\n    \"updateTime\": \"<dateTime>\",\n    \"cdmExternalId\": \"<string>\",\n    \"primaryObjectNoradId\": \"<string>\",\n    \"secondaryObjectNoradId\": \"<string>\",\n    \"tcaTime\": \"<dateTime>\",\n    \"dataSource\": \"Space-Track CDM\",\n    \"missDistance\": \"<number>\",\n    \"cdmId\": \"<uuid>\",\n    \"collisionProbability\": \"<number>\",\n    \"collisionProbabilityMethod\": \"<string>\",\n    \"radialMissDistance\": \"<number>\",\n    \"intrackMissDistance\": \"<number>\",\n    \"crosstrackMissDistance\": \"<number>\",\n    \"primaryObjectUncertainties\": {\n      \"radialMissDistanceUncertainty\": \"<number>\",\n      \"intrackMissDistanceUncertainty\": \"<number>\",\n      \"crosstrackMissDistanceUncertainty\": \"<number>\"\n    },\n    \"secondaryObjectUncertainties\": {\n      \"radialMissDistanceUncertainty\": \"<number>\",\n      \"intrackMissDistanceUncertainty\": \"<number>\",\n      \"crosstrackMissDistanceUncertainty\": \"<number>\"\n    },\n    \"primaryObjectCdmType\": \"NASA/CARA\",\n    \"secondaryObjectCdmType\": \"SSN observations\",\n    \"altitude\": \"<number>\",\n    \"latitude\": \"<number>\",\n    \"longitude\": \"<number>\",\n    \"relativeVelocity\": \"<number>\",\n    \"combinedMass\": \"<number>\",\n    \"possibleFragments\": \"<number>\",\n    \"primaryObjectSize\": \"<number>\",\n    \"secondaryObjectSize\": \"<number>\"\n  }\n]"
												},
												{
													"name": "Not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/v1/events/:event_id/summary?limit=100&offset=0&sort_order=asc",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"events",
																":event_id",
																"summary"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "100"
																},
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "sort_order",
																	"value": "asc"
																}
															],
															"variable": [
																{
																	"key": "event_id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Validation Error",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/v1/events/:event_id/summary?limit=100&offset=0&sort_order=asc",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"events",
																":event_id",
																"summary"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "100"
																},
																{
																	"key": "offset",
																	"value": "0"
																},
																{
																	"key": "sort_order",
																	"value": "asc"
																}
															],
															"variable": [
																{
																	"key": "event_id"
																}
															]
														}
													},
													"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
													"code": 422,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
												}
											]
										}
									]
								},
								{
									"name": "data-sources",
									"item": [
										{
											"name": "Event Data Sources table",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const resp = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code 200\", function() {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Contains both Space Track CDM and UKSA Analysis\", function() {\r",
															"    pm.expect(resp.spaceTrackCdm[0].dataSource).to.equal(\"Space-Track CDM\");\r",
															"    pm.expect(resp.uksaAnalysis[0].dataSource).to.equal(\"UKSA Analysis\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/events/:event_id/data-sources",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"events",
														":event_id",
														"data-sources"
													],
													"query": [
														{
															"key": "cdm_external_id",
															"value": "{{testCDMId}}",
															"description": "SpaceTrack CDM ID",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "event_id",
															"value": "{{testEventShortId}}"
														}
													]
												},
												"description": "## Description\nUsed for providing Data Sources part of a single Event page.\nData is provided in order for primary and secondary object.\nOptional SpaceTrack CDM ID can be used to provide not the most recent CDM/Analysis but those for selected CDM ID.\n\n## User Roles\n|User Role       |Permissions                                                          |\n|----------------|---------------------------------------------------------------------|\n|Superuser       |Can retrieve data sources for all events.                            |\n|Analyst         |Can retrieve data sources for all events.                            |\n|Everyone else   |Can retrieve data sources for events concerning user's organization. |"
											},
											"response": [
												{
													"name": "Successful Response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/v1/events/:event_id/data-sources?cdm_external_id=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"events",
																":event_id",
																"data-sources"
															],
															"query": [
																{
																	"key": "cdm_external_id",
																	"value": "<string>",
																	"description": "SpaceTrack CDM ID"
																}
															],
															"variable": [
																{
																	"key": "event_id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"spaceTrackCdm\": [\n    {\n      \"noradId\": \"<string>\",\n      \"dataSource\": \"UKSA Analysis\",\n      \"dataReceived\": \"<dateTime>\",\n      \"observationsNumber\": \"<integer>\",\n      \"observationsTimespan\": \"<number>\",\n      \"ephemerisName\": \"<string>\"\n    },\n    {\n      \"noradId\": \"<string>\",\n      \"dataSource\": \"Space-Track CDM\",\n      \"dataReceived\": \"<dateTime>\",\n      \"observationsNumber\": \"<integer>\",\n      \"observationsTimespan\": \"<number>\",\n      \"ephemerisName\": \"<string>\"\n    }\n  ],\n  \"uksaAnalysis\": [\n    {\n      \"noradId\": \"<string>\",\n      \"dataSource\": \"Space-Track CDM\",\n      \"dataReceived\": \"<dateTime>\",\n      \"observationsNumber\": \"<integer>\",\n      \"observationsTimespan\": \"<number>\",\n      \"ephemerisName\": \"<string>\"\n    },\n    {\n      \"noradId\": \"<string>\",\n      \"dataSource\": \"Space-Track CDM\",\n      \"dataReceived\": \"<dateTime>\",\n      \"observationsNumber\": \"<integer>\",\n      \"observationsTimespan\": \"<number>\",\n      \"ephemerisName\": \"<string>\"\n    }\n  ]\n}"
												},
												{
													"name": "Not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/v1/events/:event_id/data-sources?cdm_external_id=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"events",
																":event_id",
																"data-sources"
															],
															"query": [
																{
																	"key": "cdm_external_id",
																	"value": "<string>",
																	"description": "SpaceTrack CDM ID"
																}
															],
															"variable": [
																{
																	"key": "event_id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Validation Error",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/v1/events/:event_id/data-sources?cdm_external_id=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"v1",
																"events",
																":event_id",
																"data-sources"
															],
															"query": [
																{
																	"key": "cdm_external_id",
																	"value": "<string>",
																	"description": "SpaceTrack CDM ID"
																}
															],
															"variable": [
																{
																	"key": "event_id"
																}
															]
														}
													},
													"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
													"code": 422,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "{cdm_external_id}",
							"item": [
								{
									"name": "Get list of Events by SpaceTrack CDM ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resp = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Filter by CDM External ID returns only events with that ID\", function () {\r",
													"    resp.forEach((event) => {\r",
													"        pm.expect(event.shortId).to.be.eql(pm.variables.get(\"testEventShortId\"))\r",
													"    })\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/events/:cdm_external_id?sort_by=collision_probability&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"events",
												":cdm_external_id"
											],
											"query": [
												{
													"key": "sort_by",
													"value": "collision_probability",
													"description": "(Required) Sorting column"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											],
											"variable": [
												{
													"key": "cdm_external_id",
													"value": "{{testCDMId}}"
												}
											]
										},
										"description": "## Description\nReturns the series of Events, where one Event contains the provided SpaceTrack's CDM external ID.\n\n## User Roles\n|User Role       |Permissions                                                      |\n|----------------|-----------------------------------------------------------------|\n|Superuser       |Can list all events.                                             |\n|Analyst         |Can list all events.                                             |\n|Everyone else   |Can list events concerning user's organization.                  |"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/events/:cdm_external_id?sort_by=collision_probability&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"events",
														":cdm_external_id"
													],
													"query": [
														{
															"key": "sort_by",
															"value": "collision_probability",
															"description": "(Required) Sorting column"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													],
													"variable": [
														{
															"key": "cdm_external_id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"shortId\": \"<string>\",\n    \"primaryObjectNoradId\": \"<string>\",\n    \"secondaryObjectNoradId\": \"<string>\",\n    \"tcaTime\": \"<dateTime>\",\n    \"dataSource\": \"UKSA Analysis\",\n    \"missDistance\": \"<number>\",\n    \"cdmExternalId\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"createdAt\": \"<dateTime>\",\n    \"updatedAt\": \"<dateTime>\",\n    \"primaryObjectCommonName\": \"<string>\",\n    \"secondaryObjectCommonName\": \"<string>\",\n    \"collisionProbability\": \"<number>\",\n    \"collisionProbabilityMethod\": \"<string>\",\n    \"radialMissDistance\": \"<number>\",\n    \"intrackMissDistance\": \"<number>\",\n    \"crosstrackMissDistance\": \"<number>\",\n    \"altitude\": \"<number>\",\n    \"latitude\": \"<number>\",\n    \"longitude\": \"<number>\",\n    \"relativeVelocity\": \"<number>\",\n    \"combinedMass\": \"<number>\",\n    \"possibleFragments\": \"<number>\",\n    \"cdmCreationDate\": \"<dateTime>\"\n  },\n  {\n    \"shortId\": \"<string>\",\n    \"primaryObjectNoradId\": \"<string>\",\n    \"secondaryObjectNoradId\": \"<string>\",\n    \"tcaTime\": \"<dateTime>\",\n    \"dataSource\": \"Space-Track CDM\",\n    \"missDistance\": \"<number>\",\n    \"cdmExternalId\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"createdAt\": \"<dateTime>\",\n    \"updatedAt\": \"<dateTime>\",\n    \"primaryObjectCommonName\": \"<string>\",\n    \"secondaryObjectCommonName\": \"<string>\",\n    \"collisionProbability\": \"<number>\",\n    \"collisionProbabilityMethod\": \"<string>\",\n    \"radialMissDistance\": \"<number>\",\n    \"intrackMissDistance\": \"<number>\",\n    \"crosstrackMissDistance\": \"<number>\",\n    \"altitude\": \"<number>\",\n    \"latitude\": \"<number>\",\n    \"longitude\": \"<number>\",\n    \"relativeVelocity\": \"<number>\",\n    \"combinedMass\": \"<number>\",\n    \"possibleFragments\": \"<number>\",\n    \"cdmCreationDate\": \"<dateTime>\"\n  }\n]"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/events/:cdm_external_id?sort_by=collision_probability&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"events",
														":cdm_external_id"
													],
													"query": [
														{
															"key": "sort_by",
															"value": "collision_probability",
															"description": "(Required) Sorting column"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													],
													"variable": [
														{
															"key": "cdm_external_id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/events/:cdm_external_id?sort_by=collision_probability&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"events",
														":cdm_external_id"
													],
													"query": [
														{
															"key": "sort_by",
															"value": "collision_probability",
															"description": "(Required) Sorting column"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													],
													"variable": [
														{
															"key": "cdm_external_id"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "demo-events",
							"item": [
								{
									"name": "Get Demo Events",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resp = pm.response.json();\r",
													"\r",
													"const expected_keys = [\r",
													"    \"shortId\",\r",
													"    \"cdmCount\",\r",
													"    \"analysesCount\"\r",
													"];\r",
													"\r",
													"pm.test(\"Status code 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Demo events returned contain expected fields\", () => {\r",
													"    resp.forEach(function (demoEvent) {\r",
													"        pm.expect(demoEvent).to.have.all.keys(expected_keys)\r",
													"        });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/events/demo-events?limit=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"events",
												"demo-events"
											],
											"query": [
												{
													"key": "sort_by",
													"value": "cdm_count",
													"description": "Sorting column",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "offset",
													"value": "0",
													"disabled": true
												},
												{
													"key": "sort_order",
													"value": "asc",
													"disabled": true
												}
											]
										},
										"description": "## Description\nReturns the \"most interesting\" Events (those who have the most CDMs and Analyses).\nUseful for demo purposes.\n\n## User Roles\n|User Role       |Permissions                                                      |\n|----------------|-----------------------------------------------------------------|\n|Superuser       |Can list all events.                                             |\n|Analyst         |Can list all events.                                             |\n|Everyone else   |Can't list any events                                            |"
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/events/demo-events?sort_by=cdm_count&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"events",
														"demo-events"
													],
													"query": [
														{
															"key": "sort_by",
															"value": "cdm_count",
															"description": "Sorting column"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"short_id\": \"<string>\",\n    \"cdm_count\": \"<integer>\",\n    \"analyses_count\": \"<integer>\"\n  },\n  {\n    \"short_id\": \"<string>\",\n    \"cdm_count\": \"<integer>\",\n    \"analyses_count\": \"<integer>\"\n  }\n]"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/events/demo-events?sort_by=cdm_count&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"events",
														"demo-events"
													],
													"query": [
														{
															"key": "sort_by",
															"value": "cdm_count",
															"description": "Sorting column"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Validation Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/events/demo-events?sort_by=cdm_count&limit=100&offset=0&sort_order=asc",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"events",
														"demo-events"
													],
													"query": [
														{
															"key": "sort_by",
															"value": "cdm_count",
															"description": "Sorting column"
														},
														{
															"key": "limit",
															"value": "100"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "sort_order",
															"value": "asc"
														}
													]
												}
											},
											"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
											"code": 422,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "for-analysis",
							"item": [
								{
									"name": "Get events needing analysis by UKSA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resp = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const expected_keys = [\r",
													"        \"id\",\r",
													"        \"short_id\",\r",
													"        \"cdm_external_id\",\r",
													"        \"primary_object_norad_id\",\r",
													"        \"secondary_object_norad_id\",\r",
													"        \"primary_object_common_name\",\r",
													"        \"secondary_object_common_name\",\r",
													"        \"tca_time\",\r",
													"        \"collision_probability\",\r",
													"        \"collision_probability_method\",\r",
													"        \"miss_distance\",\r",
													"        \"primary_object_span\",\r",
													"        \"primary_object_diameter\",\r",
													"        \"primary_object_shape\",\r",
													"        \"primary_object_mass\",\r",
													"        \"primary_object_height\",\r",
													"        \"primary_object_depth\",\r",
													"        \"primary_object_width\",\r",
													"        \"primary_object_cross_section_min\",\r",
													"        \"primary_object_cross_section_avg\",\r",
													"        \"primary_object_cross_section_max\",\r",
													"        \"secondary_object_span\",\r",
													"        \"secondary_object_diameter\",\r",
													"        \"secondary_object_shape\",\r",
													"        \"secondary_object_mass\",\r",
													"        \"secondary_object_height\",\r",
													"        \"secondary_object_depth\",\r",
													"        \"secondary_object_width\",\r",
													"        \"secondary_object_cross_section_min\",\r",
													"        \"secondary_object_cross_section_avg\",\r",
													"        \"secondary_object_cross_section_max\"\r",
													"];\r",
													"\r",
													"pm.test(\"Events for analysis returned contain expected fields\", () => {\r",
													"    resp.forEach(function (event) {\r",
													"        pm.expect(event).to.have.all.keys(expected_keys)\r",
													"        });\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/v1/events/for-analysis?threshold=0.00001",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"events",
												"for-analysis"
											],
											"query": [
												{
													"key": "threshold",
													"value": "0.00001"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Events list with metadata",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resp = pm.response.json()\r",
											"\r",
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Search works with NORAD and Short ID filter\", function () {\r",
											"    pm.expect(resp[0].shortId).to.eql(pm.variables.get(\"testEventShortId\"));\r",
											"    pm.expect(resp[0].primaryObjectNoradId).to.eql(pm.variables.get(\"testSatellitePrimaryNorad\"));\r",
											"    pm.expect(resp[0].secondaryObjectNoradId).to.eql(pm.variables.get(\"testSatelliteSecondaryNorad\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/events/?norad_id={{testSatellitePrimaryNorad}}&search_like={{testEventShortId}}&epoch=past",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"events",
										""
									],
									"query": [
										{
											"key": "sort_by",
											"value": "tca_time",
											"description": "Sorting column",
											"disabled": true
										},
										{
											"key": "norad_id",
											"value": "{{testSatellitePrimaryNorad}}",
											"description": "Satellite NORAD ID"
										},
										{
											"key": "search_like",
											"value": "{{testEventShortId}}",
											"description": "Pattern search value, ie: 'ONE-'"
										},
										{
											"key": "epoch",
											"value": "past",
											"description": "Describes future or past Events"
										},
										{
											"key": "limit",
											"value": "100",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0",
											"disabled": true
										},
										{
											"key": "sort_order",
											"value": "asc",
											"disabled": true
										}
									]
								},
								"description": "## User Roles\n|User Role       |Permissions                                                  |\n|----------------|-------------------------------------------------------------|\n|Superuser       |Can list all events.                                         |\n|Analyst         |Can list all events.                                         |\n|Everyone else   |Can list events concerning user's organization.              |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/events/?sort_by=tca_time&norad_id=<string>&search_like=<string>&epoch=future&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"events",
												""
											],
											"query": [
												{
													"key": "sort_by",
													"value": "tca_time",
													"description": "Sorting column"
												},
												{
													"key": "norad_id",
													"value": "<string>",
													"description": "Satellite NORAD ID"
												},
												{
													"key": "search_like",
													"value": "<string>",
													"description": "Pattern search value, ie: 'ONE-'"
												},
												{
													"key": "epoch",
													"value": "future",
													"description": "Describes future or past Events"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"shortId\": \"<string>\",\n    \"primaryObjectNoradId\": \"<string>\",\n    \"secondaryObjectNoradId\": \"<string>\",\n    \"tcaTime\": \"<dateTime>\",\n    \"dataSource\": \"Space-Track CDM\",\n    \"missDistance\": \"<number>\",\n    \"userInterest\": \"Medium\",\n    \"id\": \"<uuid>\",\n    \"createdAt\": \"<dateTime>\",\n    \"updatedAt\": \"<dateTime>\",\n    \"primaryObjectCommonName\": \"<string>\",\n    \"secondaryObjectCommonName\": \"<string>\",\n    \"collisionProbability\": \"<number>\",\n    \"collisionProbabilityMethod\": \"<string>\",\n    \"radialMissDistance\": \"<number>\",\n    \"intrackMissDistance\": \"<number>\",\n    \"crosstrackMissDistance\": \"<number>\",\n    \"altitude\": \"<number>\",\n    \"latitude\": \"<number>\",\n    \"longitude\": \"<number>\",\n    \"relativeVelocity\": \"<number>\",\n    \"combinedMass\": \"<number>\",\n    \"possibleFragments\": \"<number>\",\n    \"cdmCreationDate\": \"<dateTime>\",\n    \"cdmExternalId\": \"<string>\"\n  },\n  {\n    \"shortId\": \"<string>\",\n    \"primaryObjectNoradId\": \"<string>\",\n    \"secondaryObjectNoradId\": \"<string>\",\n    \"tcaTime\": \"<dateTime>\",\n    \"dataSource\": \"Space-Track CDM\",\n    \"missDistance\": \"<number>\",\n    \"userInterest\": \"Low\",\n    \"id\": \"<uuid>\",\n    \"createdAt\": \"<dateTime>\",\n    \"updatedAt\": \"<dateTime>\",\n    \"primaryObjectCommonName\": \"<string>\",\n    \"secondaryObjectCommonName\": \"<string>\",\n    \"collisionProbability\": \"<number>\",\n    \"collisionProbabilityMethod\": \"<string>\",\n    \"radialMissDistance\": \"<number>\",\n    \"intrackMissDistance\": \"<number>\",\n    \"crosstrackMissDistance\": \"<number>\",\n    \"altitude\": \"<number>\",\n    \"latitude\": \"<number>\",\n    \"longitude\": \"<number>\",\n    \"relativeVelocity\": \"<number>\",\n    \"combinedMass\": \"<number>\",\n    \"possibleFragments\": \"<number>\",\n    \"cdmCreationDate\": \"<dateTime>\",\n    \"cdmExternalId\": \"<string>\"\n  }\n]"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/events/?sort_by=tca_time&norad_id=<string>&search_like=<string>&epoch=future&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"events",
												""
											],
											"query": [
												{
													"key": "sort_by",
													"value": "tca_time",
													"description": "Sorting column"
												},
												{
													"key": "norad_id",
													"value": "<string>",
													"description": "Satellite NORAD ID"
												},
												{
													"key": "search_like",
													"value": "<string>",
													"description": "Pattern search value, ie: 'ONE-'"
												},
												{
													"key": "epoch",
													"value": "future",
													"description": "Describes future or past Events"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/events/?sort_by=tca_time&norad_id=<string>&search_like=<string>&epoch=future&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"events",
												""
											],
											"query": [
												{
													"key": "sort_by",
													"value": "tca_time",
													"description": "Sorting column"
												},
												{
													"key": "norad_id",
													"value": "<string>",
													"description": "Satellite NORAD ID"
												},
												{
													"key": "search_like",
													"value": "<string>",
													"description": "Pattern search value, ie: 'ONE-'"
												},
												{
													"key": "epoch",
													"value": "future",
													"description": "Describes future or past Events"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "ephemeris",
					"item": [
						{
							"name": "Uploads .oem compatible Ephemeris file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const resp = pm.response.json();\r",
											"\r",
											"pm.test(\"Message status OK\", function () {\r",
											"    pm.expect(resp.status).to.equal(\"OK\");\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"testEphemerisFileName\", resp.data.file_name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "object_id",
											"value": "{{testSatellitePrimaryNorad}}",
											"description": "(Required) Satellite NORAD ID, must match value given in .oem filename",
											"type": "text"
										},
										{
											"key": "file",
											"description": "(Required) .oem compatible file. Filename MUST contain NORAD_ID and must match MEME_xxxxx_yyyy... pattern, where xxxxx is NORAD ID.",
											"type": "file",
											"src": "MEME_55145_20211101.txt"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/v1/ephemeris/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"ephemeris",
										""
									]
								},
								"description": "## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can create ephemeris files for all organizations.                |\n|Analyst            |Can create ephemeris files for all organizations.                |\n|Operator           |Can create ephemeris files for user's organization.              |\n|Organization Admin |Can create ephemeris files for user's organization.              |\n|Everyone else      |Can't create ephemeris files.                                    |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "object_id",
													"value": "<string>",
													"description": "(Required) Satellite NORAD ID, must match value given in .oem filename",
													"type": "text"
												},
												{
													"key": "file",
													"value": "<string>",
													"description": "(Required) .oem compatible file. Filename MUST contain NORAD_ID and must match MEME_xxxxx_yyyy... pattern, where xxxxx is NORAD ID.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/v1/ephemeris/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"ephemeris",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "object_id",
													"value": "<string>",
													"description": "(Required) Satellite NORAD ID, must match value given in .oem filename",
													"type": "text"
												},
												{
													"key": "file",
													"value": "<string>",
													"description": "(Required) .oem compatible file. Filename MUST contain NORAD_ID and must match MEME_xxxxx_yyyy... pattern, where xxxxx is NORAD ID.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/v1/ephemeris/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"ephemeris",
												""
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "object_id",
													"value": "<string>",
													"description": "(Required) Satellite NORAD ID, must match value given in .oem filename",
													"type": "text"
												},
												{
													"key": "file",
													"value": "<string>",
													"description": "(Required) .oem compatible file. Filename MUST contain NORAD_ID and must match MEME_xxxxx_yyyy... pattern, where xxxxx is NORAD ID.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/v1/ephemeris/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"ephemeris",
												""
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Gets list of Ephemeris files with sorting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resp = pm.response.json();\r",
											"\r",
											"const expected_keys = [\r",
											"        \"id\",\r",
											"        \"createdAt\",\r",
											"        \"updatedAt\",\r",
											"        \"isActive\",\r",
											"        \"creationDate\",\r",
											"        \"originator\",\r",
											"        \"objectName\",\r",
											"        \"internationalDesignator\",\r",
											"        \"refFrame\",\r",
											"        \"timeSystem\",\r",
											"        \"startTime\",\r",
											"        \"stopTime\",\r",
											"        \"centerName\",\r",
											"        \"fileName\",\r",
											"        \"satellite\",\r",
											"        \"uploader\",\r",
											"        \"uploaderOrganization\",\r",
											"        \"deletedById\",\r",
											"        \"restoredById\",\r",
											"        \"uploadedByEmail\",\r",
											"        \"uploadedByOrganizationName\"\r",
											"];\r",
											"\r",
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Ephemerites returned contain expected fields\", () => {\r",
											"    resp.forEach(function (ephemeris) {\r",
											"        pm.expect(ephemeris).to.have.all.keys(expected_keys)\r",
											"        });\r",
											"});\r",
											"\r",
											"const targetFileName = pm.collectionVariables.get(\"testEphemerisFileName\");\r",
											"\r",
											"pm.test(\"Ephemeris returned contains our upload\", () => {\r",
											"    var found = false;\r",
											"    resp.forEach((ephemeris) => {\r",
											"        found = found || (ephemeris.fileName === targetFileName);\r",
											"    })\r",
											"    pm.expect(found).to.be.true;\r",
											"})\r",
											"\r",
											"pm.collectionVariables.set(\"testEphemerisId\", resp[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/ephemeris/?norad_id={{testSatellitePrimaryNorad}}&sort_by=international_designator&show_inactive=false&limit=100&offset=0&sort_order=asc",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"ephemeris",
										""
									],
									"query": [
										{
											"key": "norad_id",
											"value": "{{testSatellitePrimaryNorad}}",
											"description": "Satellite NORAD ID"
										},
										{
											"key": "sort_by",
											"value": "international_designator",
											"description": "(Required) Sorting column"
										},
										{
											"key": "show_inactive",
											"value": "false",
											"description": "Show soft-deleted ephemeris"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "sort_order",
											"value": "asc"
										}
									]
								},
								"description": "## Description\nList Ephemeris with metadata from Users table.\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can list all ephemeris.                                          |\n|Analyst            |Can list all ephemeris.                                          |\n|Operator           |Can list ephemeris in his organization.                          |\n|Organization Admin |Can list ephemeris in his organization.                          |\n|Everyone else      |Can't list ephemeris.                                            |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/ephemeris/?norad_id=<string>&sort_by=international_designator&show_inactive=false&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"ephemeris",
												""
											],
											"query": [
												{
													"key": "norad_id",
													"value": "<string>",
													"description": "Satellite NORAD ID"
												},
												{
													"key": "sort_by",
													"value": "international_designator",
													"description": "(Required) Sorting column"
												},
												{
													"key": "show_inactive",
													"value": "false",
													"description": "Show soft-deleted ephemeris"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/ephemeris/?norad_id=<string>&sort_by=international_designator&show_inactive=false&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"ephemeris",
												""
											],
											"query": [
												{
													"key": "norad_id",
													"value": "<string>",
													"description": "Satellite NORAD ID"
												},
												{
													"key": "sort_by",
													"value": "international_designator",
													"description": "(Required) Sorting column"
												},
												{
													"key": "show_inactive",
													"value": "false",
													"description": "Show soft-deleted ephemeris"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/ephemeris/?norad_id=<string>&sort_by=international_designator&show_inactive=false&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"ephemeris",
												""
											],
											"query": [
												{
													"key": "norad_id",
													"value": "<string>",
													"description": "Satellite NORAD ID"
												},
												{
													"key": "sort_by",
													"value": "international_designator",
													"description": "(Required) Sorting column"
												},
												{
													"key": "show_inactive",
													"value": "false",
													"description": "Show soft-deleted ephemeris"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get Ephemeris file metadata",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/ephemeris/:ephemeris_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"ephemeris",
										":ephemeris_id"
									],
									"variable": [
										{
											"key": "ephemeris_id",
											"value": "{{testEphemerisId}}"
										}
									]
								},
								"description": "## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can retrieve ephemeris files from any organization.              |\n|Analyst            |Can retrieve ephemeris files from any organization.              |\n|Operator           |Can retrieve ephemeris files in his organization                 |\n|Organization Admin |Can retrieve ephemeris files in his organization                 |\n|Everyone else      |Can't retrieve ephemeris files.                                  |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/ephemeris/:ephemeris_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"ephemeris",
												":ephemeris_id"
											],
											"variable": [
												{
													"key": "ephemeris_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/ephemeris/:ephemeris_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"ephemeris",
												":ephemeris_id"
											],
											"variable": [
												{
													"key": "ephemeris_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/ephemeris/:ephemeris_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"ephemeris",
												":ephemeris_id"
											],
											"variable": [
												{
													"key": "ephemeris_id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Deletes a single Ephemeris data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 204\", function() {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/ephemeris/:ephemeris_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"ephemeris",
										":ephemeris_id"
									],
									"variable": [
										{
											"key": "ephemeris_id",
											"value": "{{testEphemerisId}}"
										}
									]
								},
								"description": "## Description\nSoft-delete an ephemeris, mark ephemeris in DB as is_active = False, allowing later restoration.\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can delete all ephemeris.                                        |\n|Analyst            |Can delete all ephemeris.                                        |\n|Operator           |Can delete ephemeris in his organization.                        |\n|Organization Admin |Can delete ephemeris in his organization.                        |\n|Everyone else      |Can't delete any ephemeris.                                      |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/ephemeris/:ephemeris_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"ephemeris",
												":ephemeris_id"
											],
											"variable": [
												{
													"key": "ephemeris_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/ephemeris/:ephemeris_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"ephemeris",
												":ephemeris_id"
											],
											"variable": [
												{
													"key": "ephemeris_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/ephemeris/:ephemeris_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"ephemeris",
												":ephemeris_id"
											],
											"variable": [
												{
													"key": "ephemeris_id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Restores a soft-deleted Ephemeris",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 204\", function() {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/ephemeris/:ephemeris_id/restore",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"ephemeris",
										":ephemeris_id",
										"restore"
									],
									"variable": [
										{
											"key": "ephemeris_id",
											"value": "{{testEphemerisId}}"
										}
									]
								},
								"description": "## Description\nRestore a soft-deleted ephemeris, mark ephemeris in DB as is_active = True.\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can restore all ephemeris.                                       |\n|Analyst            |Can restore all ephemeris.                                       |\n|Operator           |Can restore ephemeris in his organization.                       |\n|Organization Admin |Can restore ephemeris in his organization.                       |\n|Everyone else      |Can't restore any ephemeris.                                     |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/ephemeris/:ephemeris_id/restore",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"ephemeris",
												":ephemeris_id",
												"restore"
											],
											"variable": [
												{
													"key": "ephemeris_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/ephemeris/:ephemeris_id/restore",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"ephemeris",
												":ephemeris_id",
												"restore"
											],
											"variable": [
												{
													"key": "ephemeris_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/ephemeris/:ephemeris_id/restore",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"ephemeris",
												":ephemeris_id",
												"restore"
											],
											"variable": [
												{
													"key": "ephemeris_id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "FOR TEST - Deletes single Ephemeris post restore",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 204\", function() {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/ephemeris/:ephemeris_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"ephemeris",
										":ephemeris_id"
									],
									"variable": [
										{
											"key": "ephemeris_id",
											"value": "{{testEphemerisId}}"
										}
									]
								},
								"description": "## Description\nSoft-delete an ephemeris, mark ephemeris in DB as is_active = False, allowing later restoration.\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can delete all ephemeris.                                        |\n|Analyst            |Can delete all ephemeris.                                        |\n|Operator           |Can delete ephemeris in his organization.                        |\n|Organization Admin |Can delete ephemeris in his organization.                        |\n|Everyone else      |Can't delete any ephemeris.                                      |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/ephemeris/:ephemeris_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"ephemeris",
												":ephemeris_id"
											],
											"variable": [
												{
													"key": "ephemeris_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/ephemeris/:ephemeris_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"ephemeris",
												":ephemeris_id"
											],
											"variable": [
												{
													"key": "ephemeris_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/ephemeris/:ephemeris_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"ephemeris",
												":ephemeris_id"
											],
											"variable": [
												{
													"key": "ephemeris_id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "cdms",
					"item": [
						{
							"name": "latest",
							"item": [
								{
									"name": "Returns the last ingested SpaceTrack CDM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const resp = pm.response.json();\r",
													"\r",
													"const expected_keys = [\r",
													"    \"id\",\r",
													"    \"createdAt\",\r",
													"    \"updatedAt\",\r",
													"    \"externalId\",\r",
													"    \"eventId\"\r",
													"];\r",
													"\r",
													"pm.test(\"Status code 200\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Latest CDM returned contains expected fields\", () => {\r",
													"    pm.expect(resp).to.have.all.keys(expected_keys);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/cdms/latest",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"cdms",
												"latest"
											]
										}
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/cdms/latest",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"cdms",
														"latest"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"eventId\": \"<uuid>\",\n  \"id\": \"<uuid>\",\n  \"createdAt\": \"<dateTime>\",\n  \"updatedAt\": \"<dateTime>\",\n  \"externalId\": \"<string>\"\n}"
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/v1/cdms/latest",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"v1",
														"cdms",
														"latest"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "banners",
					"item": [
						{
							"name": "Create Banner Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const resp = pm.response.json();\r",
											"\r",
											"pm.test(\"Banner ID returned in body\", () => {\r",
											"    pm.expect(resp.id).to.exist;\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"testBannerId\", resp.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"content\": \"This banner will be deleted shortly! Please ignore it.\",\n  \"title\": \"E2E API Integration Tests in Postman - please ignore\",\n  \"severity\": \"High\",\n  \"isActive\": true\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/banners/messages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"banners",
										"messages"
									]
								},
								"description": "## Description\nCreate a banner message.\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can create messages.                                             |\n|Everyone else      |Can't create messages.                                           |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"content\": \"<string>\",\n  \"title\": \"<string>\",\n  \"severity\": \"Low\",\n  \"isActive\": true\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/banners/messages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"messages"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"content\": \"<string>\",\n  \"title\": \"<string>\",\n  \"is_active\": \"<boolean>\",\n  \"created_by_id\": \"<uuid>\",\n  \"id\": \"<uuid>\",\n  \"created_at\": \"<dateTime>\",\n  \"updated_at\": \"<dateTime>\",\n  \"severity\": \"Low\"\n}"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"content\": \"<string>\",\n  \"title\": \"<string>\",\n  \"severity\": \"Low\",\n  \"isActive\": true\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/banners/messages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"messages"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"content\": \"<string>\",\n  \"title\": \"<string>\",\n  \"severity\": \"Low\",\n  \"isActive\": true\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/banners/messages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"messages"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get Banner Messages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const resp = pm.response.json();\r",
											"\r",
											"pm.test(\"Banner message created earlier was retrieved\", () => {\r",
											"    found = false;\r",
											"    targetId = pm.collectionVariables.get(\"testBannerId\");\r",
											"    resp.forEach((banner) => {\r",
											"        found = (found || (banner.id === targetId));\r",
											"    });\r",
											"    pm.expect(found).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/banners/messages?sort_by=created_at&show_inactive=false&limit=100&offset=0&sort_order=asc",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"banners",
										"messages"
									],
									"query": [
										{
											"key": "sort_by",
											"value": "created_at"
										},
										{
											"key": "show_inactive",
											"value": "false"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "sort_order",
											"value": "asc"
										}
									]
								},
								"description": "## Description\nGets list of banner messages.\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can list messages.                                               |\n|Everyone else      |Can't list messages.                                             |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/banners/messages?sort_by=created_at&show_inactive=false&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"messages"
											],
											"query": [
												{
													"key": "sort_by",
													"value": "created_at"
												},
												{
													"key": "show_inactive",
													"value": "false"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"content\": \"<string>\",\n    \"title\": \"<string>\",\n    \"isActive\": \"<boolean>\",\n    \"createdById\": \"<uuid>\",\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"createdAt\": \"<dateTime>\",\n    \"updatedAt\": \"<dateTime>\",\n    \"severity\": \"High\"\n  },\n  {\n    \"content\": \"<string>\",\n    \"title\": \"<string>\",\n    \"isActive\": \"<boolean>\",\n    \"createdById\": \"<uuid>\",\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"createdAt\": \"<dateTime>\",\n    \"updatedAt\": \"<dateTime>\",\n    \"severity\": \"High\"\n  }\n]"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/banners/messages?sort_by=created_at&show_inactive=false&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"messages"
											],
											"query": [
												{
													"key": "sort_by",
													"value": "created_at"
												},
												{
													"key": "show_inactive",
													"value": "false"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/banners/messages?sort_by=created_at&show_inactive=false&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"messages"
											],
											"query": [
												{
													"key": "sort_by",
													"value": "created_at"
												},
												{
													"key": "show_inactive",
													"value": "false"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Update Banner Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"messageId\": \"{{testBannerId}}\",\n  \"content\": \"Ignore this banner - it is part of Postman E2E integration tests for the API\",\n  \"severity\": \"Low\",\n  \"title\": \"Integration test - changed the content of the banner\",\n  \"isActive\": true\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/banners/messages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"banners",
										"messages"
									]
								},
								"description": "## Description\nModify a banner message.\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can modify messages.                                             |\n|Everyone else      |Can't modify messages.                                           |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"messageId\": \"<uuid>\",\n  \"content\": \"<string>\",\n  \"severity\": \"Low\",\n  \"title\": \"<string>\",\n  \"isActive\": true\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/banners/messages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"messages"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"content\": \"<string>\",\n  \"title\": \"<string>\",\n  \"is_active\": \"<boolean>\",\n  \"created_by_id\": \"<uuid>\",\n  \"id\": \"<uuid>\",\n  \"created_at\": \"<dateTime>\",\n  \"updated_at\": \"<dateTime>\",\n  \"severity\": \"Low\"\n}"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"messageId\": \"<uuid>\",\n  \"content\": \"<string>\",\n  \"severity\": \"Low\",\n  \"title\": \"<string>\",\n  \"isActive\": true\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/banners/messages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"messages"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"messageId\": \"<uuid>\",\n  \"content\": \"<string>\",\n  \"severity\": \"Low\",\n  \"title\": \"<string>\",\n  \"isActive\": true\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/banners/messages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"messages"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Create Banner Schedule",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var currentDate = new Date();\r",
											"pm.variables.set(\"testBannerScheduleStart\",currentDate.toJSON());\r",
											"var futureDate = new Date();\r",
											"futureDate.setDate(futureDate.getDate() + 5);\r",
											"pm.variables.set(\"testBannerScheduleEnd\", futureDate.toJSON());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const resp = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"testBannerScheduleId\", resp.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"broadcastStart\": \"{{testBannerScheduleStart}}\",\n  \"broadcastEnd\": \"{{testBannerScheduleEnd}}\",\n  \"messageId\": \"{{testBannerId}}\",\n  \"isActive\": true\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/banners/schedules",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"banners",
										"schedules"
									]
								},
								"description": "## Description\nCreates a schedule for a given banner message.\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can create a schedule.                                           |\n|Everyone else      |Can't create a schedule.                                         |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"broadcastStart\": \"<dateTime>\",\n  \"broadcastEnd\": \"<dateTime>\",\n  \"messageId\": \"<uuid>\",\n  \"isActive\": true\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/banners/schedules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"schedules"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"broadcast_start\": \"<dateTime>\",\n  \"broadcast_end\": \"<dateTime>\",\n  \"is_active\": \"<boolean>\",\n  \"message_id\": \"<uuid>\",\n  \"set_by_id\": \"<uuid>\",\n  \"id\": \"<uuid>\",\n  \"created_at\": \"<dateTime>\",\n  \"updated_at\": \"<dateTime>\"\n}"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"broadcastStart\": \"<dateTime>\",\n  \"broadcastEnd\": \"<dateTime>\",\n  \"messageId\": \"<uuid>\",\n  \"isActive\": true\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/banners/schedules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"schedules"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"broadcastStart\": \"<dateTime>\",\n  \"broadcastEnd\": \"<dateTime>\",\n  \"messageId\": \"<uuid>\",\n  \"isActive\": true\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/v1/banners/schedules",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"schedules"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get Current Banner Messages With Sorting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/banners/messages/current?sort_by=created_by_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"banners",
										"messages",
										"current"
									],
									"query": [
										{
											"key": "sort_by",
											"value": "created_by_id",
											"description": "(Required) Sorting column"
										},
										{
											"key": "limit",
											"value": "100",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0",
											"disabled": true
										},
										{
											"key": "sort_order",
											"value": "asc",
											"disabled": true
										}
									]
								},
								"description": "## Description\nGets currently broadcasted banner messages.\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Active user        |Can get currently broadcasted banner(s)                          |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/banners/messages/current?sort_by=created_by_id&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"messages",
												"current"
											],
											"query": [
												{
													"key": "sort_by",
													"value": "created_by_id",
													"description": "(Required) Sorting column"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"content\": \"<string>\",\n    \"title\": \"<string>\",\n    \"isActive\": \"<boolean>\",\n    \"createdById\": \"<uuid>\",\n    \"broadcastStart\": \"<dateTime>\",\n    \"broadcastEnd\": \"<dateTime>\",\n    \"messageId\": \"<uuid>\",\n    \"setById\": \"<uuid>\",\n    \"id\": \"<uuid>\",\n    \"createdAt\": \"<dateTime>\",\n    \"updatedAt\": \"<dateTime>\",\n    \"severity\": \"Medium\"\n  },\n  {\n    \"content\": \"<string>\",\n    \"title\": \"<string>\",\n    \"isActive\": \"<boolean>\",\n    \"createdById\": \"<uuid>\",\n    \"broadcastStart\": \"<dateTime>\",\n    \"broadcastEnd\": \"<dateTime>\",\n    \"messageId\": \"<uuid>\",\n    \"setById\": \"<uuid>\",\n    \"id\": \"<uuid>\",\n    \"createdAt\": \"<dateTime>\",\n    \"updatedAt\": \"<dateTime>\",\n    \"severity\": \"High\"\n  }\n]"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/banners/messages/current?sort_by=created_by_id&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"messages",
												"current"
											],
											"query": [
												{
													"key": "sort_by",
													"value": "created_by_id",
													"description": "(Required) Sorting column"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/banners/messages/current?sort_by=created_by_id&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"messages",
												"current"
											],
											"query": [
												{
													"key": "sort_by",
													"value": "created_by_id",
													"description": "(Required) Sorting column"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get Banner Schedules",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"resp = pm.response.json();\r",
											"\r",
											"pm.test(\"Created banner schedule can be retrieved\", () => {\r",
											"    pm.expect(resp[0].id).to.equal(pm.collectionVariables.get(\"testBannerScheduleId\"))\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/banners/schedules?show_inactive=false&sort_by=created_by_id&limit=100&offset=0&sort_order=asc",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"banners",
										"schedules"
									],
									"query": [
										{
											"key": "show_inactive",
											"value": "false"
										},
										{
											"key": "sort_by",
											"value": "created_by_id",
											"description": "(Required) Sorting column"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "sort_order",
											"value": "asc"
										}
									]
								},
								"description": "## Description\nGets a list of defined banner schedules.\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can list schedules.                                              |\n|Everyone else      |Can't list schedules.                                            |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/banners/schedules?show_inactive=false&sort_by=created_by_id&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"schedules"
											],
											"query": [
												{
													"key": "show_inactive",
													"value": "false"
												},
												{
													"key": "sort_by",
													"value": "created_by_id",
													"description": "(Required) Sorting column"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"broadcastStart\": \"<dateTime>\",\n    \"broadcastEnd\": \"<dateTime>\",\n    \"isActive\": \"<boolean>\",\n    \"messageId\": \"<uuid>\",\n    \"setById\": \"<uuid>\",\n    \"title\": \"<string>\",\n    \"content\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"createdAt\": \"<dateTime>\",\n    \"updatedAt\": \"<dateTime>\"\n  },\n  {\n    \"broadcastStart\": \"<dateTime>\",\n    \"broadcastEnd\": \"<dateTime>\",\n    \"isActive\": \"<boolean>\",\n    \"messageId\": \"<uuid>\",\n    \"setById\": \"<uuid>\",\n    \"title\": \"<string>\",\n    \"content\": \"<string>\",\n    \"id\": \"<uuid>\",\n    \"createdAt\": \"<dateTime>\",\n    \"updatedAt\": \"<dateTime>\"\n  }\n]"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/banners/schedules?show_inactive=false&sort_by=created_by_id&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"schedules"
											],
											"query": [
												{
													"key": "show_inactive",
													"value": "false"
												},
												{
													"key": "sort_by",
													"value": "created_by_id",
													"description": "(Required) Sorting column"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/banners/schedules?show_inactive=false&sort_by=created_by_id&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"schedules"
											],
											"query": [
												{
													"key": "show_inactive",
													"value": "false"
												},
												{
													"key": "sort_by",
													"value": "created_by_id",
													"description": "(Required) Sorting column"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Delete Banner Schedule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 204\", function() {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/banners/schedules/:schedule_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"banners",
										"schedules",
										":schedule_id"
									],
									"variable": [
										{
											"key": "schedule_id",
											"value": "{{testBannerScheduleId}}"
										}
									]
								},
								"description": "## Description\nSoft-deletes a schedule.\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can delete a schedule.                                           |\n|Everyone else      |Can't delete a schedule.                                         |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/banners/schedules/:schedule_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"schedules",
												":schedule_id"
											],
											"variable": [
												{
													"key": "schedule_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/banners/schedules/:schedule_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"schedules",
												":schedule_id"
											],
											"variable": [
												{
													"key": "schedule_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/banners/schedules/:schedule_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"schedules",
												":schedule_id"
											],
											"variable": [
												{
													"key": "schedule_id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Delete Banner Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 204\", function() {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/banners/messages/:message_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"banners",
										"messages",
										":message_id"
									],
									"variable": [
										{
											"key": "message_id",
											"value": "{{testBannerId}}"
										}
									]
								},
								"description": "## Description\nSoft-delete (set is_active=False) a banner message.\n\n## User Roles\n|User Role          |Permissions                                                      |\n|-------------------|-----------------------------------------------------------------|\n|Superuser          |Can delete messages.                                             |\n|Everyone else      |Can't delete messages.                                           |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/banners/messages/:message_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"messages",
												":message_id"
											],
											"variable": [
												{
													"key": "message_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/banners/messages/:message_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"messages",
												":message_id"
											],
											"variable": [
												{
													"key": "message_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/banners/messages/:message_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"banners",
												"messages",
												":message_id"
											],
											"variable": [
												{
													"key": "message_id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "analyses",
					"item": [
						{
							"name": "Upload Analysis JSON file to database",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resp = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Message status OK\", function () {\r",
											"    pm.expect(resp.message[0].status).to.equal(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "json_file",
											"description": "(Required) ",
											"type": "file",
											"src": "test_analysis_nadzrx-orkxod-vjqva.json"
										},
										{
											"key": "event_short_id",
											"value": "{{testAnalysisEventShortId}}",
											"description": "(Required) ",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/v1/analyses/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"analyses",
										""
									]
								},
								"description": "## User Roles\n|User Role       |Permissions                                                      |\n|----------------|-----------------------------------------------------------------|\n|Superuser       |Can create analyses.                                             |\n|Analyst         |Can create analyses.                                             |\n|Everyone else   |Can't create analyses.                                           |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "json_file",
													"value": "<string>",
													"description": "(Required) ",
													"type": "text"
												},
												{
													"key": "event_short_id",
													"value": "<string>",
													"description": "(Required) ",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/v1/analyses/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"analyses",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "json_file",
													"value": "<string>",
													"description": "(Required) ",
													"type": "text"
												},
												{
													"key": "event_short_id",
													"value": "<string>",
													"description": "(Required) ",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/v1/analyses/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"analyses",
												""
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "json_file",
													"value": "<string>",
													"description": "(Required) ",
													"type": "text"
												},
												{
													"key": "event_short_id",
													"value": "<string>",
													"description": "(Required) ",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/v1/analyses/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"analyses",
												""
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "FOR TEST - Get Analysis ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// run post request to log the long ID for next request\r",
											"const new_long_id = pm.response.json()[0].id;\r",
											"\r",
											"pm.collectionVariables.set(\"testAnalysisAnalysisId\", new_long_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/events/:event_id/summary?limit=1&offset=0&sort_order=asc",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"events",
										":event_id",
										"summary"
									],
									"query": [
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "sort_order",
											"value": "asc"
										}
									],
									"variable": [
										{
											"key": "event_id",
											"value": "{{testAnalysisEventShortId}}"
										}
									]
								},
								"description": "## Description\nReturns summary data for an Event. Data can be taken from Analysis or from CDMs\n(the most recent type is returned).\n\n## User Roles\n|User Role       |Permissions                                                         |\n|----------------|--------------------------------------------------------------------|\n|Superuser       |Can retrieve summaries for all events.                              |\n|Analyst         |Can retrieve summaries for all events.                              |\n|Everyone else   |Can retrieve summaries for events concerning user's organization.   |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/events/:event_id/summary?limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"events",
												":event_id",
												"summary"
											],
											"query": [
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											],
											"variable": [
												{
													"key": "event_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<uuid>\",\n    \"shortId\": \"<string>\",\n    \"updateTime\": \"<dateTime>\",\n    \"cdmExternalId\": \"<string>\",\n    \"primaryObjectNoradId\": \"<string>\",\n    \"secondaryObjectNoradId\": \"<string>\",\n    \"tcaTime\": \"<dateTime>\",\n    \"dataSource\": \"UKSA Analysis\",\n    \"missDistance\": \"<number>\",\n    \"cdmId\": \"<uuid>\",\n    \"collisionProbability\": \"<number>\",\n    \"collisionProbabilityMethod\": \"<string>\",\n    \"radialMissDistance\": \"<number>\",\n    \"intrackMissDistance\": \"<number>\",\n    \"crosstrackMissDistance\": \"<number>\",\n    \"primaryObjectUncertainties\": {\n      \"radialMissDistanceUncertainty\": \"<number>\",\n      \"intrackMissDistanceUncertainty\": \"<number>\",\n      \"crosstrackMissDistanceUncertainty\": \"<number>\"\n    },\n    \"secondaryObjectUncertainties\": {\n      \"radialMissDistanceUncertainty\": \"<number>\",\n      \"intrackMissDistanceUncertainty\": \"<number>\",\n      \"crosstrackMissDistanceUncertainty\": \"<number>\"\n    },\n    \"primaryObjectCdmType\": \"Owner/operator ephemeris\",\n    \"secondaryObjectCdmType\": \"Owner/operator ephemeris\",\n    \"altitude\": \"<number>\",\n    \"latitude\": \"<number>\",\n    \"longitude\": \"<number>\",\n    \"relativeVelocity\": \"<number>\",\n    \"combinedMass\": \"<number>\",\n    \"possibleFragments\": \"<number>\",\n    \"primaryObjectSize\": \"<number>\",\n    \"secondaryObjectSize\": \"<number>\"\n  },\n  {\n    \"id\": \"<uuid>\",\n    \"shortId\": \"<string>\",\n    \"updateTime\": \"<dateTime>\",\n    \"cdmExternalId\": \"<string>\",\n    \"primaryObjectNoradId\": \"<string>\",\n    \"secondaryObjectNoradId\": \"<string>\",\n    \"tcaTime\": \"<dateTime>\",\n    \"dataSource\": \"Space-Track CDM\",\n    \"missDistance\": \"<number>\",\n    \"cdmId\": \"<uuid>\",\n    \"collisionProbability\": \"<number>\",\n    \"collisionProbabilityMethod\": \"<string>\",\n    \"radialMissDistance\": \"<number>\",\n    \"intrackMissDistance\": \"<number>\",\n    \"crosstrackMissDistance\": \"<number>\",\n    \"primaryObjectUncertainties\": {\n      \"radialMissDistanceUncertainty\": \"<number>\",\n      \"intrackMissDistanceUncertainty\": \"<number>\",\n      \"crosstrackMissDistanceUncertainty\": \"<number>\"\n    },\n    \"secondaryObjectUncertainties\": {\n      \"radialMissDistanceUncertainty\": \"<number>\",\n      \"intrackMissDistanceUncertainty\": \"<number>\",\n      \"crosstrackMissDistanceUncertainty\": \"<number>\"\n    },\n    \"primaryObjectCdmType\": \"NASA/CARA\",\n    \"secondaryObjectCdmType\": \"SSN observations\",\n    \"altitude\": \"<number>\",\n    \"latitude\": \"<number>\",\n    \"longitude\": \"<number>\",\n    \"relativeVelocity\": \"<number>\",\n    \"combinedMass\": \"<number>\",\n    \"possibleFragments\": \"<number>\",\n    \"primaryObjectSize\": \"<number>\",\n    \"secondaryObjectSize\": \"<number>\"\n  }\n]"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/events/:event_id/summary?limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"events",
												":event_id",
												"summary"
											],
											"query": [
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											],
											"variable": [
												{
													"key": "event_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/events/:event_id/summary?limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"events",
												":event_id",
												"summary"
											],
											"query": [
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											],
											"variable": [
												{
													"key": "event_id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Gets list of Analyses with sorting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resp = pm.response.json();\r",
											"\r",
											"const expected_keys = [\r",
											"        \"id\",\r",
											"        \"createdAt\",\r",
											"        \"updatedAt\",\r",
											"        \"tcaTime\",\r",
											"        \"collisionProbability\",\r",
											"        \"collisionProbabilityMethod\",\r",
											"        \"updateTime\",\r",
											"        \"cdmExternalId\",\r",
											"        \"isActive\",\r",
											"        \"missDistance\",\r",
											"        \"radialMissDistance\",\r",
											"        \"intrackMissDistance\",\r",
											"        \"crosstrackMissDistance\",\r",
											"        \"missDistanceUncertainty\",\r",
											"        \"altitude\",\r",
											"        \"latitude\",\r",
											"        \"longitude\",\r",
											"        \"relativeVelocity\",\r",
											"        \"combinedMass\",\r",
											"        \"possibleFragments\",\r",
											"        \"primaryObjectNoradId\",\r",
											"        \"secondaryObjectNoradId\",\r",
											"        \"primaryObjectObservationsData\",\r",
											"        \"secondaryObjectObservationsData\",\r",
											"        \"eventId\",\r",
											"        \"eventShortId\",\r",
											"        \"uploadedById\",\r",
											"        \"deletedById\",\r",
											"        \"restoredById\",\r",
											"        \"uploadedByEmail\",\r",
											"        \"deletedByEmail\",\r",
											"        \"restoredByEmail\"\r",
											"];\r",
											"\r",
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Analysis returned contains expected fields\", () => {\r",
											"    resp.forEach(function (analysis) {\r",
											"        pm.expect(analysis).to.have.all.keys(expected_keys)\r",
											"        });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/analyses/?sort_by=tca_time&sort_order=desc",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"analyses",
										""
									],
									"query": [
										{
											"key": "sort_by",
											"value": "tca_time",
											"description": "(Required) Sorting column"
										},
										{
											"key": "limit",
											"value": "10",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0",
											"disabled": true
										},
										{
											"key": "sort_order",
											"value": "desc"
										}
									]
								},
								"description": "## Description\nLists Analyses with metadata from Users table.\n\n## User Roles\n|User Role       |Permissions                                                      |\n|----------------|-----------------------------------------------------------------|\n|Superuser       |Can list all analyses.                                           |\n|Analyst         |Can list all analyses.                                           |\n|Everyone else   |Can't list analyses.                                             |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/analyses/?sort_by=uploaded_by_id&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"analyses",
												""
											],
											"query": [
												{
													"key": "sort_by",
													"value": "uploaded_by_id",
													"description": "(Required) Sorting column"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/analyses/?sort_by=uploaded_by_id&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"analyses",
												""
											],
											"query": [
												{
													"key": "sort_by",
													"value": "uploaded_by_id",
													"description": "(Required) Sorting column"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/analyses/?sort_by=uploaded_by_id&limit=100&offset=0&sort_order=asc",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"analyses",
												""
											],
											"query": [
												{
													"key": "sort_by",
													"value": "uploaded_by_id",
													"description": "(Required) Sorting column"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Gets single Analysis data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resp = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code 200\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Returned object matches uploaded\", () => {\r",
											"    pm.expect(resp.tca_time).to.equal(\"2024-04-18T22:57:32.881000\");\r",
											"    pm.expect(resp.id).to.equal(pm.collectionVariables.get(\"testAnalysisAnalysisId\"));\r",
											"    pm.expect(resp.event_short_id).to.equal(pm.collectionVariables.get(\"testAnalysisEventShortId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/analyses/:analysis_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"analyses",
										":analysis_id"
									],
									"variable": [
										{
											"key": "analysis_id",
											"value": "{{testAnalysisAnalysisId}}"
										}
									]
								},
								"description": "## User Roles\n|User Role       |Permissions                                                      |\n|----------------|-----------------------------------------------------------------|\n|All             |Can retrieve all analyses.                                       |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/analyses/:analysis_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"analyses",
												":analysis_id"
											],
											"variable": [
												{
													"key": "analysis_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/analyses/:analysis_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"analyses",
												":analysis_id"
											],
											"variable": [
												{
													"key": "analysis_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/analyses/:analysis_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"analyses",
												":analysis_id"
											],
											"variable": [
												{
													"key": "analysis_id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Deletes single Analysis data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 204\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/v1/analyses/:analysis_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"analyses",
										":analysis_id"
									],
									"variable": [
										{
											"key": "analysis_id",
											"value": "{{testAnalysisAnalysisId}}"
										}
									]
								},
								"description": "## Description\nSoft-delete an analysis. Analysis can be restored.\n\n## User Roles\n|User Role       |Permissions                                                      |\n|----------------|-----------------------------------------------------------------|\n|Superuser       |Can delete all analyses.                                         |\n|Analyst         |Can delete all analyses.                                         |\n|Everyone else   |Can't delete analyses.                                           |"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/analyses/:analysis_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"analyses",
												":analysis_id"
											],
											"variable": [
												{
													"key": "analysis_id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/analyses/:analysis_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"analyses",
												":analysis_id"
											],
											"variable": [
												{
													"key": "analysis_id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/v1/analyses/:analysis_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"v1",
												"analyses",
												":analysis_id"
											],
											"variable": [
												{
													"key": "analysis_id"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "/",
			"item": [
				{
					"name": "Healthcheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// after all tests, unset the bearer token\r",
									"pm.environment.unset(\"bearerToken\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						}
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "Authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearerToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Common test methods",
					"utils = {",
					"    isKeyValuePairInObjectList: function (list, key, value) {",
					"        found = false;",
					"        list.forEach((obj) => {",
					"            found = (found || (obj[key] === value));",
					"        });",
					"        return found;",
					"    }",
					"};",
					"",
					"var todaysDate = new Date();",
					"pm.collectionVariables.set(\"dateToday\", encodeURIComponent(todaysDate.toISOString()));",
					"",
					"var pastDate = new Date();",
					"pastDate.setDate(pastDate.getDate() - 5);",
					"pm.collectionVariables.set(\"date5DaysAgo\", encodeURIComponent(pastDate.toISOString()));",
					"",
					"// Get OAuth bearer token if not already set",
					"if(pm.environment.get(\"bearerToken\") === undefined) {",
					"    console.log(\"Fetching new OAuth token\")",
					"    pm.sendRequest({ ",
					"    url: pm.environment.get(\"authBaseUrl\") + \"/oauth/token\",",
					"    method: 'POST',",
					"    header: {",
					"        'Accept': 'application/json',",
					"        'Content-Type': 'application/x-www-form-urlencoded'",
					"    },",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: 'client_id', value: pm.environment.get(\"clientId\")},",
					"            {key: 'client_secret', value: pm.environment.get(\"clientSecret\")},",
					"            {key: 'grant_type', value: 'client_credentials'},",
					"            {key: 'audience', value: pm.environment.get(\"authAudience\")}",
					"        ]",
					"    }",
					"},",
					"    (err, res) => {",
					"        pm.environment.set(\"bearerToken\", res.json().access_token);",
					"});",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "testSatellitePrimaryNorad",
			"value": "55145",
			"type": "string"
		},
		{
			"key": "testSatelliteSecondaryNorad",
			"value": "28892",
			"type": "string"
		},
		{
			"key": "testEventShortId",
			"value": "vjgagee-qkpwjrg-gqdplw",
			"type": "string"
		},
		{
			"key": "testCDMId",
			"value": "475880959",
			"type": "string"
		},
		{
			"key": "testEventId",
			"value": "6436efe7-0252-4ef7-a407-dc2eb0cdde87",
			"type": "string"
		},
		{
			"key": "testAnalysisEventShortId",
			"value": "nadzrx-orkxod-vjqva",
			"type": "string"
		},
		{
			"key": "testAnalysisAnalysisId",
			"value": ""
		},
		{
			"key": "testBannerId",
			"value": ""
		},
		{
			"key": "testBannerScheduleId",
			"value": ""
		},
		{
			"key": "testEphemerisId",
			"value": ""
		},
		{
			"key": "testEphemerisFileName",
			"value": ""
		},
		{
			"key": "testUserEmail",
			"value": "e2e@thepsc.co.uk",
			"type": "string"
		},
		{
			"key": "testUserFirstName",
			"value": "End'to",
			"type": "string"
		},
		{
			"key": "testUserId",
			"value": ""
		},
		{
			"key": "dateToday",
			"value": ""
		},
		{
			"key": "date5DaysAgo",
			"value": ""
		}
	]
}